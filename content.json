{"meta":{"title":"个人博客","subtitle":"xZhaoquan","description":"","author":"xZhaoquan","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2022-08-30T12:16:49.877Z","updated":"2022-08-30T12:27:49.047Z","comments":true,"path":"2022/08/30/hello-world/","link":"","permalink":"http://example.com/2022/08/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"hexo如何在网页上面显示图片","slug":"hexo如何在网页上面显示图片","date":"2022-08-29T09:24:28.000Z","updated":"2022-08-30T12:16:49.877Z","comments":true,"path":"2022/08/29/hexo如何在网页上面显示图片/","link":"","permalink":"http://example.com/2022/08/29/hexo%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%8A%E9%9D%A2%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/","excerpt":"","text":"hexo如何在网页上面显示图片1、将typora的图像设置设置成复制到指定路径，和优先使用相对路径 2、在根目录安装hexo-asset-image，就能按照markdown的格式进行图片的插入。1npm install https://github.com/CodeFalling/hexo-asset-image --save 3、配置_config_yml文件12//设置 post_asset_folder 为truepost_asset_folder: true","categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"数组指针和指针数组","slug":"数组指针和指针数组","date":"2022-08-29T06:25:05.000Z","updated":"2022-08-30T12:16:49.880Z","comments":true,"path":"2022/08/29/数组指针和指针数组/","link":"","permalink":"http://example.com/2022/08/29/%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84/","excerpt":"","text":"数组指针和指针数组1、数组指针 数组指针：指向数组的指针，优先级顺序是：（）&gt; [] &gt; * 12//根据优先级，先看括号内，则p是一个指针，这个指针指向一个一维数组，数组长度为n，这是“数组的指针”，即数组指针int （*p1）[5]; 对于语句“int ( * p1)[5]”，“()”的优先级比“[]”高，“*”号和 p1 构成一个指针的定义，指针变量名为 p1，而 int 修饰的是数组的内容，即数组的每个元素。也就是说，p1 是一个指针，它指向一个包含 5 个 int 类型数据的数组，如下所示。很显然，它是一个数组指针，数组在这里并没有名字，是个匿名数组。 123 -------------------------------------------p1 ----&gt; | int * | init * | int * | init * | int * | ------------------------------------------- 12345678910111213141516171819202122232425262728293031323334#include &lt;stdio.h&gt;int main()&#123; int (*p)[5]; //定义一个数组指针 int arr[5] = &#123;1,2,3,4,5&#125;; //定义一个数组 p = &amp;arr; //p指向数组首地址 printf(&quot;p0 value = %d\\r\\n&quot;,*(*p + 0)); //arr[0] printf(&quot;p1 value = %d\\r\\n&quot;,*(*p + 1)); //arr[1] printf(&quot;p2 value = %d\\r\\n&quot;,*(*p + 2)); //arr[2] printf(&quot;p3 value = %d\\r\\n&quot;,*(*p + 3)); //arr[3] printf(&quot;p4 value = %d\\r\\n&quot;,*(*p + 4)); //arr[4] return 0;&#125;//p 代表的是数组首地址//arr 代表的是整个数组首元素首地址//&amp;arr 代表整个数组首地址(对数组首元素首地址取地址得到数组首地址)//*p 代表数组首元素首地址//*p+1 代表数组首元素地址 + 1//**p //表示数组首元素首地址对应的值//将二维数组赋给指针#include &lt;stdio.h&gt;int main()&#123; int b[3][4]; int (*pp)[4];//定义一个数组指针，指向含四个元素的一维数组 pp = b;//将该二维数组的首地址赋给pp，也就是b[0]或&amp;b[0]，二维数组中pp=b和pp=&amp;b[0]是等价的 pp++;//该语句执行过后pp的指向从行b[0][]变为了行b[1][]，pp=&amp;b[1] return 0;&#125;//根据上面二维数组可以得出，数组指针也称指向一维数组的指针，所以数组指针也称行指针。 2、指针数组 指针数组：装着指针的数组，优先级顺序：[] &gt;* 12int *p2[5];//根据优先级，先看[]，则p是一个数组，再结合*，这个数组的元素是指针类型，共n个元素，这是“指针的数组”，即指针数组。 对于int *p2[5] 来说，因为“ [] ”的优先级要比 “ * ”的优先级要高，所以p2先和“ [] ”结合，构成一个数组的定义，数组名为p2,而“ int ”修饰的是数组的内容，即数组的每个元素。也就是说，该数组包含 5 个指向 int 类型数据的指针，如下所示。因此他是一个指针数组。 1234 p2----------------------------------------------------------------------------| | | | |int * int * int * int * int * 1234567891011121314151617181920#include &lt;stdio.h&gt;int main()&#123; // ptr 里面存放的是 5个字符串的首元素地址 char *ptr[5]=&#123;&quot;hello&quot;,&quot;world&quot;,&quot;blos&quot;,&quot;456&quot;,&quot;hhels&quot;&#125;; int a = 1; int b = 2; int *p[2]; p[0] = &amp;a; p[1] = &amp;b; printf(&quot;%d\\r\\n&quot;,*p[0]); printf(&quot;%d\\r\\n&quot;,*p[1]); printf(&quot;%s\\r\\n&quot;,ptr[0]); printf(&quot;%s\\r\\n&quot;,ptr[1]); return 0;&#125; 对指针数组来说，首先它是一个数组，数组的元素都是指针，也就是说该数组存储的是指针，数组占多少个字节由数组本身决定；而对数组指针来说，首先它是一个指针，它指向一个数组，也就是说它是指向数组的指针.","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"git初始化连接远程仓库","slug":"git初始化连接远程仓库","date":"2022-08-26T14:47:35.000Z","updated":"2022-08-30T12:16:49.876Z","comments":true,"path":"2022/08/26/git初始化连接远程仓库/","link":"","permalink":"http://example.com/2022/08/26/git%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/","excerpt":"","text":"如何使用git1、安装完git之后一开始需要配置全局git（每个操作系统只需要初始化一次）123456//配置用户名git config --global user.name &quot;yourname&quot;//配置邮箱git config --global user.email &quot;youremail&quot;//查看是否配置成功git config --list --global 2、初始化git仓库1git init 3、配置ssh公钥 生成公钥 1ssh-keygen -t rsa -C &quot;youremail&quot; //youremail是前面global配置的email 查看获取公钥 1cat ~/.ssh/id_rsa.pub 将获取到的公钥添加到gitee上面 查看公钥是否配置成功 1ssh -T git@gitee.com 远程仓库的添加和查看 12345//远程仓库添加git remote add origin +(远程仓库地址)//git remote add origin git@gitee.com:linux_4/drivers-imx6ull.git//查看远程仓库git remote 拉取远程分支 1git pull origin master","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"git的一些常用操作","slug":"git的一些常用操作","date":"2022-08-26T13:42:20.000Z","updated":"2022-08-30T12:16:49.876Z","comments":true,"path":"2022/08/26/git的一些常用操作/","link":"","permalink":"http://example.com/2022/08/26/git%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","excerpt":"","text":"git常用命令1、单个文件加入缓存区12git add +需要加入缓存的文件git add . //将所有文件加入跟踪 2、撤销add添加缓存命令12git reset + 想要撤销的文件git reset . //撤销add 的所有文件 3、将缓存区里面的内容提交&#x2F;修改1234//提交git commit -m &quot;需要添加的注释&quot;//修改commit提交的信息git commit --amend + 修改commit提交的信息 4、创建分支&#x2F;查看分支&#x2F;切换分支&#x2F;合并分支123456789101112//创建分支git branch + 创建分支名//查看分支git branch//切换分支git checkout + 切换分支名//切换分支 如果没有分支就创建分支 git checkout -b +分支名//分支合并git merge + 分支名称 5、删除分支1234//删除时需要做检查git branch -d +分支名称 （要做检查的删除分支）//删除时不需要做任何检查git branch -D +分支名称 （不做任何检查的强制删除） 6、查看提交的历史信息123456//查看提交的详细历史信息git log git log --graph --oneline (以图形化界面查看)//获取每条日志的简要信息git log --pretty=oneline//查看本地的操作历史git reflog 7、配置SSH公钥123456//生成公钥ssh-keygen -t rsa -C &quot;youremail@example.com&quot;//获取公钥cat ~/.ssh/id_rsa.pub//查看公钥是否添加成功 ssh -T git@gitee.com 8、远程仓库的添加&#x2F;推送&#x2F;查看&#x2F;删除&#x2F;拉取12345678910111213//远程仓库的添加git remote add origin +(远程仓库地址)//远程仓库的查看 git remote//远程仓库的推送 git push origin master git pull --rebase origin master（如果推送不成功使用这个）（保持远端和本地数据同步） //与远端分支关系绑定 git push --set-upstream origin master:master （与远端关系绑定） （本地master） (远端master) //删除指定远程分支 git push origin --delete master git push origin :master //指定拉取分支 git pull origin master（如果pull出现冲突，可以版本回退和 封存修改，pull之后在还原） 9、查看本地分支与远程分支的对应关系1git branch -vv 10、git克隆1git clone + 克隆地址 11、git版本回退12//git 回退到你想要回退的版本号git reset --hard + 版本对应的id 12、强制拉取合并分支1git pull origin master --allow-unrelated-histories 13、删除远程仓库1git remote rm origin 14、创建远端仓库分支1git pull origin + 本地分支","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"markdown使用说明","slug":"markdown使用说明","date":"2022-08-25T15:17:46.000Z","updated":"2022-08-30T12:16:49.879Z","comments":true,"path":"2022/08/25/markdown使用说明/","link":"","permalink":"http://example.com/2022/08/25/markdown%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","excerpt":"","text":"markdown 使用说明功能快捷键撤销：Ctrl/Command + Z重做：Ctrl/Command + Y加粗：Ctrl/Command + B斜体：Ctrl/Command + I标题：Ctrl/Command + Shift + H无序列表：Ctrl/Command + Shift + U有序列表：Ctrl/Command + Shift + O检查列表：Ctrl/Command + Shift + C插入代码：Ctrl/Command + Shift + K插入链接：Ctrl/Command + Shift + L插入图片：Ctrl/Command + Shift + G查找：Ctrl/Command + F替换：Ctrl/Command + G 标题的创建直接输入1次#，并按下space后，将生成1级标题。输入2次#，并按下space后，将生成2级标题。以此类推，我们支持6级标题。有助于使用TOC语法后生成一个完美的目录。 如何改变文本的样式、12345678910111213*强调文本* _强调文本_**加粗文本** __加粗文本__==标记文本==~~删除文本~~&gt; 引用文本H~2~O is是液体。2^10^ 运算结果是 1024. 强调文本 强调文本 加粗文本 加粗文本 &#x3D;&#x3D;标记文本&#x3D;&#x3D; 删除文本 引用文本 H2O is是液体。 2^10^ 运算结果是 1024. 插入链接与图片1链接: [link](https://www.csdn.net/). 链接: link. 生成列表12345678910- 项目 - 项目 - 项目1. 项目12. 项目23. 项目3- [ ] 计划任务- [x] 完成任务 项目 项目 项目 项目1 项目2 项目3 计划任务 完成任务 创建表格12345项目 | Value-------- | -----电脑 | $1600手机 | $12导管 | $1 项目 Value 电脑 $1600 手机 $12 导管 $1 设定内容居中，居左，居右123456使用`:---------:`居中使用`:----------`居左使用`----------:`居右| 第一列 | 第二列 | 第三列 ||:-----------:| :-------------:|:-------------|| 第一列文本居中 | 第二列文本居右 | 第三列文本居左 | 使用:---------:居中使用:----------居左使用----------:居右 第一列 第二列 第三列 第一列文本居中 第二列文本居右 第三列文本居左 创建一个注脚123一个具有注脚的文本。[^2][^2]: 注脚的解释 一个具有注脚的文本。^2 流程图123456789这将产生一个流程图。:​```mermaidgraph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D&#123;菱形&#125;C --&gt; D​``` 这将产生一个流程图。: 12345graph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D&#123;菱形&#125;C --&gt; D","categories":[],"tags":[{"name":"md","slug":"md","permalink":"http://example.com/tags/md/"}]}],"categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"md","slug":"md","permalink":"http://example.com/tags/md/"}]}