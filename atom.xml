<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>Siwat</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-10T02:22:09.818Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Napat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RS232_RS485_TTL电平标准</title>
    <link href="http://example.com/2023/10/10/RS232-RS485-TTL%E7%94%B5%E5%B9%B3%E6%A0%87%E5%87%86/"/>
    <id>http://example.com/2023/10/10/RS232-RS485-TTL%E7%94%B5%E5%B9%B3%E6%A0%87%E5%87%86/</id>
    <published>2023-10-10T01:55:34.000Z</published>
    <updated>2023-10-10T02:22:09.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RS232-RS485-TTL电平标准"><a href="#RS232-RS485-TTL电平标准" class="headerlink" title="RS232 RS485 TTL电平标准"></a>RS232 RS485 TTL电平标准</h2><h3 id="RS232电平标准"><a href="#RS232电平标准" class="headerlink" title="RS232电平标准"></a>RS232电平标准</h3><h4 id="RS232通信模式："><a href="#RS232通信模式：" class="headerlink" title="RS232通信模式："></a>RS232通信模式：</h4><p>RS232是全双工通信。</p><h4 id="RS232的逻辑电平"><a href="#RS232的逻辑电平" class="headerlink" title="RS232的逻辑电平"></a>RS232的逻辑电平</h4><ul><li>逻辑1：-15V–5V </li><li>逻辑0：+3V–+15V</li></ul><p>RS232 的逻辑电平和TTL 不一样但是协议是一样的。</p><h2 id="RS485电平标准"><a href="#RS485电平标准" class="headerlink" title="RS485电平标准"></a>RS485电平标准</h2><h3 id="RS485通信模式"><a href="#RS485通信模式" class="headerlink" title="RS485通信模式"></a>RS485通信模式</h3><p>RS485是半双工通信</p><h3 id="RS485的逻辑电平"><a href="#RS485的逻辑电平" class="headerlink" title="RS485的逻辑电平"></a>RS485的逻辑电平</h3><ul><li>逻辑1：+2V–+6V (A - B)</li><li>逻辑0：-6V–+2V (A - B)</li><li>高阻态（控制信号未使能）</li></ul><p>这里的电平指AB两线间的电压差。</p><h2 id="TTL电平标准"><a href="#TTL电平标准" class="headerlink" title="TTL电平标准"></a>TTL电平标准</h2><h3 id="TTL通信模式‘"><a href="#TTL通信模式‘" class="headerlink" title="TTL通信模式‘"></a>TTL通信模式‘</h3><p>TTL是全双工通信</p><h3 id="TTL的逻辑电平"><a href="#TTL的逻辑电平" class="headerlink" title="TTL的逻辑电平"></a>TTL的逻辑电平</h3><ul><li>逻辑1: 2.4V–5V </li><li>逻辑0: 0V–0.5V</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RS232-RS485-TTL电平标准&quot;&gt;&lt;a href=&quot;#RS232-RS485-TTL电平标准&quot; class=&quot;headerlink&quot; title=&quot;RS232 RS485 TTL电平标准&quot;&gt;&lt;/a&gt;RS232 RS485 TTL电平标准&lt;/h2&gt;&lt;h3 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Qt文件读写</title>
    <link href="http://example.com/2023/09/21/Qt%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    <id>http://example.com/2023/09/21/Qt%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</id>
    <published>2023-09-21T08:17:49.000Z</published>
    <updated>2023-09-21T08:33:32.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt文件读写"><a href="#Qt文件读写" class="headerlink" title="Qt文件读写"></a>Qt文件读写</h2><h3 id="QFile"><a href="#QFile" class="headerlink" title="QFile"></a>QFile</h3><p>QFile 是一个读写文本、二进制文件和资源的 I&#x2F;O 设备。 QFile 可以自己使用，也可以更方便地与 QTextStream 或 QDataStream 一起使用。  </p><h4 id="QFile常用操作函数"><a href="#QFile常用操作函数" class="headerlink" title="QFile常用操作函数"></a>QFile常用操作函数</h4><ul><li>exists()检查文件是否存在  </li><li>remove()删除文件  </li><li>open()打开文件  </li><li>close()关闭文件  </li><li>flush()刷新文件  </li><li>read()读取文件</li><li>write()写入文件</li></ul><p>通常使用 QDataStream 或 QTextStream 读写数据，但也可以调用 QIODevice 继承的函数 read()、readLine()、 readAll()、 write()。 QFile 还继承 getChar()、 putChar()和 ungetChar()，它们一次只处理一个字符。文件的大小由 size()返回。可以使用 pos()获取当前文件位置，也可以使用 seek()移动到新的文件位置。如果已经到达文件的末尾，则 atEnd()返回 true。  </p><p>QFile::open()函数打开文件时需要传递 QIODevice::OpenModeFlag 枚举类型的参数，决定文件以什么方式打开， QIODevice::OpenModeFlag 类型的主要取值如下  </p><ul><li>QIODevice::ReadOnly：以只读方式打开文件，用于载入文件。  </li><li>QIODevice::WriteOnly：以只写方式打开文件，用于保存文件。</li><li>QIODevice::ReadWrite：以读写方式打开。  </li><li>QIODevice::Append：以添加模式打开，新写入文件的数据添加到文件尾部。  </li><li>QIODevice::Truncate：以截取方式打开文件，文件原有的内容全部被删除。</li><li>QIODevice::Text：以文本方式打开文件，读取时“\n”被自动翻译为换行符，写入时字符串结束符会自动翻译为系统平台的编码，如 Windows 平台下是“\r\n”。</li></ul><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QFileDialog&gt;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    textEdit = new QTextEdit();</span><br><span class="line">    vBoxLayout = new QVBoxLayout();</span><br><span class="line">    hBoxLayout = new QHBoxLayout();</span><br><span class="line">    vWidget = new QWidget();</span><br><span class="line">    hWidget = new QWidget();</span><br><span class="line">    openFileButton = new QPushButton();</span><br><span class="line">    closeFileButton = new QPushButton();</span><br><span class="line">    /*设置两个按钮大小*/</span><br><span class="line">    openFileButton-&gt;setMaximumHeight(50);</span><br><span class="line">    openFileButton-&gt;setMaximumWidth(120);</span><br><span class="line">    closeFileButton-&gt;setMaximumHeight(50);</span><br><span class="line">    closeFileButton-&gt;setMaximumWidth(120);</span><br><span class="line"></span><br><span class="line">    openFileButton-&gt;setText(&quot;打开&quot;);</span><br><span class="line">    closeFileButton-&gt;setText(&quot;关闭&quot;);</span><br><span class="line"></span><br><span class="line">    /*将按钮设置为不可用*/</span><br><span class="line">    closeFileButton-&gt;setEnabled(false);</span><br><span class="line">    /*水平布局*/</span><br><span class="line">    hBoxLayout-&gt;addWidget(openFileButton);</span><br><span class="line">    hBoxLayout-&gt;addWidget(closeFileButton);</span><br><span class="line">    hWidget-&gt;setLayout(hBoxLayout);</span><br><span class="line">    /*垂直布局*/</span><br><span class="line">    vBoxLayout-&gt;addWidget(textEdit);</span><br><span class="line">    vBoxLayout-&gt;addWidget(hWidget);</span><br><span class="line">    vWidget-&gt;setLayout(vBoxLayout);</span><br><span class="line">    /*设置vWidget居中*/</span><br><span class="line">    setCentralWidget(vWidget);</span><br><span class="line"></span><br><span class="line">    connect(openFileButton,SIGNAL(clicked()),this,SLOT(openFile()));</span><br><span class="line">    connect(closeFileButton,SIGNAL(clicked()),this,SLOT(closeFile()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool MainWindow::openFile()&#123;</span><br><span class="line">    QString file_name = QFileDialog::getOpenFileName(this);</span><br><span class="line"></span><br><span class="line">    /*指向文件*/</span><br><span class="line">    file.setFileName(file_name);</span><br><span class="line">    /*判断文件是否存在*/</span><br><span class="line">    if(!file.exists())&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    /*打开文件*/</span><br><span class="line">    if(!file.open(QIODevice::ReadOnly | QIODevice::Text))&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    /*读取文本到textEdit*/</span><br><span class="line">    textEdit-&gt;setPlainText(file.readAll());</span><br><span class="line">    /*设置打开按钮不可用*/</span><br><span class="line">    openFileButton-&gt;setEnabled(false);</span><br><span class="line">    /*设置关闭按钮可用*/</span><br><span class="line">    closeFileButton-&gt;setEnabled(true);</span><br><span class="line">    file.close();</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::closeFile()&#123;</span><br><span class="line">    /*检测打开按钮openFileButton是否可用,不可用时表示打开了文件*/</span><br><span class="line">    if(!openFileButton-&gt;isEnabled())&#123;</span><br><span class="line">        /*获取textEdit的文本内容*/</span><br><span class="line">        QString str = textEdit-&gt;toPlainText();</span><br><span class="line">        if(!file.open(QIODevice::WriteOnly | QIODevice::Text))&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        QByteArray strBytes = str.toUtf8();</span><br><span class="line">        file.write(strBytes,strBytes.length());</span><br><span class="line"></span><br><span class="line">        textEdit-&gt;clear();</span><br><span class="line">        file.close();</span><br><span class="line"></span><br><span class="line">        /*重新设置按钮属性*/</span><br><span class="line">        openFileButton-&gt;setEnabled(true);</span><br><span class="line">        closeFileButton-&gt;setEnabled(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例"><a href="#ui示例" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/21/Qt%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/image-20230921162316212.png" alt="image-20230921162316212"></p><h3 id="QTextStream"><a href="#QTextStream" class="headerlink" title="QTextStream"></a>QTextStream</h3><p>QTextStream 类为读写文本提供了一个方便的接口，常与 QFile 结合使用。  可以使用 C++的操作符“&lt;&lt;”和“&gt;&gt;” (流提取运算符和流插入运算符)进行操作流了  </p><h5 id="代码QFile代码类似，代码部分示例"><a href="#代码QFile代码类似，代码部分示例" class="headerlink" title="代码QFile代码类似，代码部分示例"></a>代码QFile代码类似，代码部分示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*使用文本流读取文件*/</span><br><span class="line">QTextStream stream(&amp;file);</span><br><span class="line"></span><br><span class="line">/*读取文本到textEdit*/</span><br><span class="line">textEdit-&gt;setPlainText(stream.readAll());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QTextStream stream(&amp;file);</span><br><span class="line">/*获取textEdit的文本内容，转换成字符串*/</span><br><span class="line">QString str = textEdit-&gt;toPlainText();</span><br><span class="line">/*使用流提取运算符*/</span><br><span class="line">stream&lt;&lt;str;</span><br></pre></td></tr></table></figure><h5 id="ui同QFile一致"><a href="#ui同QFile一致" class="headerlink" title="ui同QFile一致"></a>ui同QFile一致</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt文件读写&quot;&gt;&lt;a href=&quot;#Qt文件读写&quot; class=&quot;headerlink&quot; title=&quot;Qt文件读写&quot;&gt;&lt;/a&gt;Qt文件读写&lt;/h2&gt;&lt;h3 id=&quot;QFile&quot;&gt;&lt;a href=&quot;#QFile&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt项目控件组</title>
    <link href="http://example.com/2023/09/21/Qt%E9%A1%B9%E7%9B%AE%E6%8E%A7%E4%BB%B6%E7%BB%84/"/>
    <id>http://example.com/2023/09/21/Qt%E9%A1%B9%E7%9B%AE%E6%8E%A7%E4%BB%B6%E7%BB%84/</id>
    <published>2023-09-21T06:03:41.000Z</published>
    <updated>2023-09-21T07:24:15.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt项目控件组"><a href="#Qt项目控件组" class="headerlink" title="Qt项目控件组"></a>Qt项目控件组</h2><h3 id="QListWidget"><a href="#QListWidget" class="headerlink" title="QListWidget"></a>QListWidget</h3><p>QListWidget 类提供了一个基于项的列表小部件。 QListWidget 是一个便捷的类，它提供了一个类似于 QListView（下一小节将讲到）提供的列表视图，但是提供了一个用于添加和删除项目的基于项目的经典接口。 QListWidget 使用内部模型来管理列表中的每个 QListWidgetItem。  </p><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QFileDialog&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    listWidget = new QListWidget(this);</span><br><span class="line">    /*设置listWidget的大小*/</span><br><span class="line">    listWidget-&gt;setGeometry(0,0,480,480);</span><br><span class="line">    listWidget-&gt;addItem(&quot;请点击右边的添加项添加内容&quot;);</span><br><span class="line">    button = new QPushButton(this);</span><br><span class="line">    button-&gt;setGeometry(540,200,200,100);</span><br><span class="line">    button-&gt;setText(&quot;添加项&quot;);</span><br><span class="line"></span><br><span class="line">    connect(button,SIGNAL(clicked()),this,SLOT(buttonClicked()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::buttonClicked()&#123;</span><br><span class="line">    /*调用系统窗口打开文件，过滤文件名*/</span><br><span class="line">    QString file_name = QFileDialog::getOpenFileName(this,</span><br><span class="line">                                                     tr(&quot;添加项&quot;),</span><br><span class="line">                                                     &quot;&quot;,</span><br><span class="line">                                                     tr(&quot;Files(*.mp3)&quot;));</span><br><span class="line">    if(file_name != NULL)&#123;</span><br><span class="line">        listWidget-&gt;addItem(file_name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例"><a href="#ui示例" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/21/Qt%E9%A1%B9%E7%9B%AE%E6%8E%A7%E4%BB%B6%E7%BB%84/image-20230921141936691.png" alt="image-20230921141936691"></p><h3 id="QTreeWidget"><a href="#QTreeWidget" class="headerlink" title="QTreeWidget"></a>QTreeWidget</h3><p>QTreeWidget 类提供了一个使用预定义树模型的树视图。QTreeWidget 类是一个便捷的类，它提供了一个标准的树小部件，具有一个类似于 qt3 中的 QListView 类所使用的基于项目的经典接口。该类基于 Qt 的模型&#x2F;视图体系结构，并使用默认模型来保存项，每个项都是 QTreeWidgetItem。  </p><h5 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    treeWidget = new QTreeWidget(this);</span><br><span class="line">    this-&gt;setCentralWidget(treeWidget);</span><br><span class="line"></span><br><span class="line">    /*清空列表*/</span><br><span class="line">    treeWidget-&gt;clear();</span><br><span class="line">    /*实例化顶层树节点*/</span><br><span class="line">    upItem = new QTreeWidgetItem(treeWidget);</span><br><span class="line">    upItem-&gt;setText(0,&quot;同学&quot;);</span><br><span class="line">    upItem-&gt;setFlags(Qt::ItemIsUserCheckable|</span><br><span class="line">                     Qt::ItemIsEnabled|</span><br><span class="line">                     Qt::ItemIsSelectable);</span><br><span class="line">    /*树节点设置为未选中*/</span><br><span class="line">    upItem-&gt;setCheckState(0,Qt::Unchecked);</span><br><span class="line"></span><br><span class="line">    QList &lt;QString&gt;  strList;</span><br><span class="line">    strList&lt;&lt;&quot;小明&quot;&lt;&lt;&quot;小红&quot;&lt;&lt;&quot;小蓝&quot;;</span><br><span class="line">    /*在顶层节点下面实例化3个子节点*/</span><br><span class="line">    for(int i = 0;i &lt; 3;i ++)&#123;</span><br><span class="line">        subItem[i] = new QTreeWidgetItem(upItem);</span><br><span class="line">        subItem[i]-&gt;setText(0,strList[i]);</span><br><span class="line">        /*设置子节点的属性为用户可选，项开启，项可选*/</span><br><span class="line">        subItem[i]-&gt;setFlags(Qt::ItemIsUserCheckable|</span><br><span class="line">                             Qt::ItemIsEnabled|</span><br><span class="line">                             Qt::ItemIsSelectable);</span><br><span class="line">        /*设置子节点的状态为未选中*/</span><br><span class="line">        subItem[i]-&gt;setCheckState(0,Qt::Unchecked);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    connect(treeWidget,SIGNAL(itemChanged(QTreeWidgetItem*,int)),this,SLOT(treeItemChanged(QTreeWidgetItem*,int)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*子节点跟新处理函数*/</span><br><span class="line">void MainWindow::subItemHandle(QTreeWidgetItem *item)&#123;</span><br><span class="line">    /*获取节点的上层节点*/</span><br><span class="line">    QTreeWidgetItem *parentItem = item-&gt;parent();</span><br><span class="line">    if(parentItem == NULL)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    /*初始化选中的数目为0,下面根据selectCount来判断树节点的状态*/</span><br><span class="line">    int selectCount = 0;</span><br><span class="line">    /*获取子节点的总数*/</span><br><span class="line">    int childCount = parentItem-&gt;childCount();</span><br><span class="line">    for(int i = 0;i &lt; childCount;i ++)&#123;</span><br><span class="line">        QTreeWidgetItem *childItem = parentItem-&gt;child(i);</span><br><span class="line">        /*判断当前节点的状态是否为选中状态，如果是则加1*/</span><br><span class="line">        if(childItem-&gt;checkState(0) == Qt::Checked)&#123;</span><br><span class="line">            selectCount ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*根据selectCount来判断树节点的状态*/</span><br><span class="line">    /*当选中的子节点小于或等于0时，则设置树节点为未选中的状态*/</span><br><span class="line">    if(selectCount &lt;= 0)&#123;</span><br><span class="line">        /*设置为未选中状态*/</span><br><span class="line">        parentItem-&gt;setCheckState(0,Qt::Unchecked);</span><br><span class="line">    &#125;else if(selectCount &gt; 0 &amp;&amp; selectCount &lt; childCount)&#123;</span><br><span class="line">        /*设置为半选中状态*/</span><br><span class="line">        parentItem-&gt;setCheckState(0,Qt::PartiallyChecked);</span><br><span class="line">    &#125;else if(selectCount == childCount)&#123;</span><br><span class="line">        /*设置为全选中状态*/</span><br><span class="line">        parentItem-&gt;setCheckState(0,Qt::Checked);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::treeItemChanged(QTreeWidgetItem *item,int value)&#123;</span><br><span class="line">    (void) value;</span><br><span class="line">    /*获取子节点个数*/</span><br><span class="line">    int count = item-&gt;childCount();</span><br><span class="line">    /*如果顶层节点被选中*/</span><br><span class="line">    if(Qt::Checked == item-&gt;checkState(0))&#123;</span><br><span class="line">        /*若选中的项是树节点,count会大于0，否则选中的项是子节点*/</span><br><span class="line">        if(count &gt; 0)&#123;</span><br><span class="line">            for(int i = 0;i &lt; count;i ++)&#123;</span><br><span class="line">                item-&gt;child(i)-&gt;setCheckState(0,Qt::Checked);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            /*子节点处理*/</span><br><span class="line">            subItemHandle(item);</span><br><span class="line">        &#125;</span><br><span class="line">        /*如果顶层节点取消选中*/</span><br><span class="line">    &#125;else if(Qt::Unchecked == item-&gt;checkState(0))&#123;</span><br><span class="line">        if(count &gt; 0)&#123;</span><br><span class="line">            /*如果选中的是树节点*/</span><br><span class="line">            for(int i = 0;i &lt; count;i ++)&#123;</span><br><span class="line">                item-&gt;child(i)-&gt;setCheckState(0,Qt::Unchecked);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            subItemHandle(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-1"><a href="#ui示例-1" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/21/Qt%E9%A1%B9%E7%9B%AE%E6%8E%A7%E4%BB%B6%E7%BB%84/image-20230921150630642.png" alt="image-20230921150630642"></p><h3 id="QTableWidget"><a href="#QTableWidget" class="headerlink" title="QTableWidget"></a>QTableWidget</h3><p>QTableWidget 类提供了一个带有默认模型的基于项的表视图。表小部件为应用程序提供标准的表显示工具。  </p><h5 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    tableWidget = new QTableWidget();</span><br><span class="line">    this-&gt;setCentralWidget(tableWidget);</span><br><span class="line">    /*设置列数*/</span><br><span class="line">    tableWidget-&gt;setColumnCount(2);</span><br><span class="line">    /*设置行数*/</span><br><span class="line">    tableWidget-&gt;setRowCount(2);</span><br><span class="line">    /*使用标签设置水平标题标签*/</span><br><span class="line">    tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;&quot;姓名&quot;&lt;&lt;&quot;性别&quot;);</span><br><span class="line">    QList &lt;QString&gt; strList;</span><br><span class="line">    strList&lt;&lt;&quot;小明&quot;&lt;&lt;&quot;小红&quot;&lt;&lt;&quot;男&quot;&lt;&lt;&quot;女&quot;;</span><br><span class="line">    for(int i = 0;i &lt; 4;i ++)&#123;</span><br><span class="line">        tableWidgetItem[i] = new QTableWidgetItem();</span><br><span class="line">        tableWidgetItem[i]-&gt;setText(strList[i]);</span><br><span class="line">        tableWidgetItem[i]-&gt;setTextAlignment(Qt::AlignCenter);</span><br><span class="line">    &#125;</span><br><span class="line">    /*插入数据表的index，一个二位数组数据*/</span><br><span class="line">    tableWidget-&gt;setItem(0,0,tableWidgetItem[0]);</span><br><span class="line">    tableWidget-&gt;setItem(1,0,tableWidgetItem[1]);</span><br><span class="line">    tableWidget-&gt;setItem(0,1,tableWidgetItem[2]);</span><br><span class="line">    tableWidget-&gt;setItem(1,1,tableWidgetItem[3]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-2"><a href="#ui示例-2" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/21/Qt%E9%A1%B9%E7%9B%AE%E6%8E%A7%E4%BB%B6%E7%BB%84/image-20230921152412701.png" alt="image-20230921152412701"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt项目控件组&quot;&gt;&lt;a href=&quot;#Qt项目控件组&quot; class=&quot;headerlink&quot; title=&quot;Qt项目控件组&quot;&gt;&lt;/a&gt;Qt项目控件组&lt;/h2&gt;&lt;h3 id=&quot;QListWidget&quot;&gt;&lt;a href=&quot;#QListWidget&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>代码编程规范</title>
    <link href="http://example.com/2023/09/20/%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    <id>http://example.com/2023/09/20/%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</id>
    <published>2023-09-20T09:10:10.000Z</published>
    <updated>2023-09-20T09:14:17.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码编程规范"><a href="#代码编程规范" class="headerlink" title="代码编程规范"></a>代码编程规范</h2><h3 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h3><p>宏定义使用字母加下划线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define EXAMPLE_A_B</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量使用小写字母加下划线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char example_a_b;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数使用驼峰命名法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void functionExample(void)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码编程规范&quot;&gt;&lt;a href=&quot;#代码编程规范&quot; class=&quot;headerlink&quot; title=&quot;代码编程规范&quot;&gt;&lt;/a&gt;代码编程规范&lt;/h2&gt;&lt;h3 id=&quot;宏定义&quot;&gt;&lt;a href=&quot;#宏定义&quot; class=&quot;headerlink&quot; title=&quot;宏定义</summary>
      
    
    
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Qt项目视图组</title>
    <link href="http://example.com/2023/09/20/Qt%E9%A1%B9%E7%9B%AE%E8%A7%86%E5%9B%BE%E7%BB%84/"/>
    <id>http://example.com/2023/09/20/Qt%E9%A1%B9%E7%9B%AE%E8%A7%86%E5%9B%BE%E7%BB%84/</id>
    <published>2023-09-20T08:03:13.000Z</published>
    <updated>2023-09-21T05:59:33.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt项目视图组"><a href="#Qt项目视图组" class="headerlink" title="Qt项目视图组"></a>Qt项目视图组</h2><h3 id="QListView"><a href="#QListView" class="headerlink" title="QListView"></a>QListView</h3><p>QListView 类提供模型上的列表或图标视图。  </p><p>QListView 以简单的非分层列表或图标集合的形式显示存储在模型中的项。  </p><p>QT 提供了一些现成的 models 用于处理数据项（这些是 Qt 处理数据模型的精华，如果用到Qt 数据模型，下面这些是经常要用到的）：  </p><ul><li>QStringListModel 用于存储简单的 QString 列表。  </li><li>QStandardItemModel 管理复杂的树型结构数据项，每项都可以包含任意数据。  </li><li>QDirModel 提供本地文件系统中的文件与目录信息。  </li><li>QSqlQueryModel, QSqlTableModel,QSqlRelationTableModel 用来访问数据库。</li></ul><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    listView = new QListView(this);</span><br><span class="line">    this-&gt;setCentralWidget(listView);</span><br><span class="line"></span><br><span class="line">    QStringList strList;</span><br><span class="line">    strList&lt;&lt;&quot;高三(1)班&quot;&lt;&lt;&quot;高三(2)班&quot;&lt;&lt;&quot;高三(3)班&quot;&lt;&lt;&quot;高三(4)班&quot;;</span><br><span class="line"></span><br><span class="line">    /*实例化字符串模型*/</span><br><span class="line">    stringListModel = new QStringListModel(strList);</span><br><span class="line">    /*向表中插入一段数据*/</span><br><span class="line">    listView-&gt;setModel(stringListModel);</span><br><span class="line">    /*设置视图为图标模式*/</span><br><span class="line">    listView-&gt;setViewMode(QListView::IconMode);</span><br><span class="line">    /*设置为不可拖动*/</span><br><span class="line">    listView-&gt;setDragEnabled(false);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例"><a href="#ui示例" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E9%A1%B9%E7%9B%AE%E8%A7%86%E5%9B%BE%E7%BB%84/image-20230920162231401.png" alt="image-20230920162231401"></p><h3 id="QTreeView"><a href="#QTreeView" class="headerlink" title="QTreeView"></a>QTreeView</h3><p>QTreeView 类提供树视图的默认模型&#x2F;视图实现。 QTreeView 实现了模型项的树表示。  要使一个 QTreeView 能够显示数据，需要构造一个 model 并设置 QTreeView。 Qt 提供了一些类型的 Model，其中最常用的就是这个<br>QStandardItemModel 类，一般可以满足大部分需求。  另外，表头的内容也由这个 model管理，setHorizontalHeaderLabels  函数可以设置共有多少列、每列文字。一级标题直接使用 appendRow方法添加到 model 上，次级标题则是添加到第一个父级标题上，依次构成父子关系树。  </p><h5 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QStandardItem&gt;</span><br><span class="line">#include &lt;QStandardItemModel&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    treeView = new QTreeView(this);</span><br><span class="line"></span><br><span class="line">    this-&gt;setCentralWidget(treeView);</span><br><span class="line"></span><br><span class="line">    /*构建modle*/</span><br><span class="line">    QStandardItemModel *sdiModule = new QStandardItemModel(treeView);</span><br><span class="line">    sdiModule-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;QStringLiteral(&quot;标题&quot;)</span><br><span class="line">                                         &lt;&lt; QStringLiteral(&quot;名称&quot;));</span><br><span class="line">    for(int i = 0;i &lt; 5;i ++)&#123;</span><br><span class="line">        /*一级标题*/</span><br><span class="line">        QList &lt;QStandardItem *&gt; items1;</span><br><span class="line">        QStandardItem *item1 = new QStandardItem(QString::number(i));</span><br><span class="line">        QStandardItem *item2 = new QStandardItem(QStringLiteral(&quot;一级标题&quot;));</span><br><span class="line">        /*添加项1*/</span><br><span class="line">        items1.append(item1);</span><br><span class="line">        /*添加项2*/</span><br><span class="line">        items1.append(item2);</span><br><span class="line">        /*将items1添加到sdiModule*/</span><br><span class="line">        sdiModule-&gt;appendRow(items1);</span><br><span class="line">        for(int j = 0;j &lt; 5;j ++)&#123;</span><br><span class="line">            /*在一级标题后面插入二级标题*/</span><br><span class="line">            QList &lt;QStandardItem *&gt; items2;</span><br><span class="line">            QStandardItem * item3 = new QStandardItem(QString::number(j));</span><br><span class="line">            QStandardItem * item4 = new QStandardItem(QStringLiteral(&quot;二级标题&quot;));</span><br><span class="line"></span><br><span class="line">            items2.append(item3);</span><br><span class="line">            items2.append(item4);</span><br><span class="line">            item1-&gt;appendRow(items2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    treeView-&gt;setModel(sdiModule);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-1"><a href="#ui示例-1" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E9%A1%B9%E7%9B%AE%E8%A7%86%E5%9B%BE%E7%BB%84/image-20230921102401703.png" alt="image-20230921102401703"></p><h3 id="QTableView"><a href="#QTableView" class="headerlink" title="QTableView"></a>QTableView</h3><p>QTableView 类提供了表视图的默认模型&#x2F;视图实现。 QTableView 实现了一个表视图，用于显示来自模型的项。  Qt 提供了一些类型的 Model，其中最常用的就是这个QStandardItemModel 类，一般可以满足大部分需求。另外，表头的内容也由这个 model 管理，setHorizontalHeaderLabels 函数可以设置共有多少列、每列文字。  </p><h5 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QStandardItemModel&gt;</span><br><span class="line">#include &lt;QHeaderView&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    tableView = new QTableView(this);</span><br><span class="line">    this-&gt;setCentralWidget(tableView);</span><br><span class="line"></span><br><span class="line">    /*显示网格线*/</span><br><span class="line">    tableView-&gt;setShowGrid(true);</span><br><span class="line"></span><br><span class="line">    QStandardItemModel *model = new QStandardItemModel();</span><br><span class="line">    QStringList lables = QObject::tr(&quot;语文,数学,英语&quot;).simplified().split(&quot;,&quot;);</span><br><span class="line">    /*设置水平头标签*/</span><br><span class="line">    model-&gt;setHorizontalHeaderLabels(lables);</span><br><span class="line">    /*model插入内容*/</span><br><span class="line">    QStandardItem * item = 0;</span><br><span class="line">    for(int i = 0;i &lt; 5;i ++)&#123;</span><br><span class="line">        item = new  QStandardItem(&quot;80&quot;);</span><br><span class="line">        model-&gt;setItem(i,0,item);</span><br><span class="line">        item = new  QStandardItem(&quot;90&quot;);</span><br><span class="line">        model-&gt;setItem(i,1,item);</span><br><span class="line">        item = new  QStandardItem(&quot;100&quot;);</span><br><span class="line">        model-&gt;setItem(i,2,item);</span><br><span class="line">    &#125;</span><br><span class="line">    /*将model设置给tableView*/</span><br><span class="line">    tableView-&gt;setModel(model);</span><br><span class="line">    /*平均分列*/</span><br><span class="line">    tableView-&gt;horizontalHeader()-&gt;setSectionResizeMode(QHeaderView::Stretch);</span><br><span class="line">    /*平均分行*/</span><br><span class="line">    tableView-&gt;verticalHeader()-&gt;setSectionResizeMode(QHeaderView::Stretch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-2"><a href="#ui示例-2" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E9%A1%B9%E7%9B%AE%E8%A7%86%E5%9B%BE%E7%BB%84/image-20230921104143600.png" alt="image-20230921104143600"></p><h3 id="QColumnView"><a href="#QColumnView" class="headerlink" title="QColumnView"></a>QColumnView</h3><p>QColumnView 在许多 QListViews 中显示一个模型，每个 QListViews 对应树中的每个层次结构。这有时被称为级联列表。 QColumnView 类是模型&#x2F;视图类之一，是 Qt 模型&#x2F;视图框架的一部分。   </p><h5 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QStandardItem&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    columnView = new QColumnView(this);</span><br><span class="line">    this-&gt;setCentralWidget(columnView);</span><br><span class="line"></span><br><span class="line">    QStandardItemModel *model = new QStandardItemModel(this);</span><br><span class="line">    /*省份*/</span><br><span class="line">    QStandardItem *province = new QStandardItem(&quot;四川省&quot;);</span><br><span class="line">    /*城市*/</span><br><span class="line">    QStandardItem *city1 = new QStandardItem(&quot;成都市&quot;);</span><br><span class="line">    QStandardItem *city2 = new QStandardItem(&quot;绵阳市&quot;);</span><br><span class="line">    /*将城市添加到省份*/</span><br><span class="line">    province-&gt;appendRow(city1);</span><br><span class="line">    province-&gt;appendRow(city2);</span><br><span class="line"></span><br><span class="line">    /*区域*/</span><br><span class="line">    QStandardItem *area1 = new QStandardItem(&quot;武侯区&quot;);</span><br><span class="line">    QStandardItem *area2 = new QStandardItem(&quot;金牛区&quot;);</span><br><span class="line">    /*将区域添加到城市*/</span><br><span class="line">    city1-&gt;appendRow(area1);</span><br><span class="line">    city1-&gt;appendRow(area2);</span><br><span class="line"></span><br><span class="line">    model-&gt;appendRow(province);</span><br><span class="line">    columnView-&gt;setModel(model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-3"><a href="#ui示例-3" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E9%A1%B9%E7%9B%AE%E8%A7%86%E5%9B%BE%E7%BB%84/image-20230921105547479.png" alt="image-20230921105547479"></p><h3 id="QundoView"><a href="#QundoView" class="headerlink" title="QundoView"></a>QundoView</h3><p>QUndoView 类显示 QUndoStack 的内容。 QUndoView 是一个QListView，它显示在撤销堆栈上推送的命令列表。总是选择最近执行的命令。选择不同的命令会导致调用QUndoStack::setIndex()，将文档的状态向后或向前滚动到新命令。可以使用setStack()显式地设置堆栈。  </p><h5 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h5><p>mainWindow.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    /* 设置主窗体显示的位置与大小 */</span><br><span class="line">    this-&gt;setGeometry(0, 0, 800, 480);</span><br><span class="line"></span><br><span class="line">    /* 实例一个水平布局，用于左侧按钮区域与右侧历史记录面板 */</span><br><span class="line">    hLayout = new QHBoxLayout();</span><br><span class="line"></span><br><span class="line">    /* 实例一个水平布局，用于左侧标签与按钮 */</span><br><span class="line">    vLayout = new QVBoxLayout();</span><br><span class="line"></span><br><span class="line">    /* 主Widget, 因为MainWindow自带一个布局，</span><br><span class="line">     * 我们要新建一个Widget容纳新布局</span><br><span class="line">     */</span><br><span class="line">    mainWidget = new QWidget();</span><br><span class="line"></span><br><span class="line">    /* 用于存放命令行栈 */</span><br><span class="line">    undoStack = new QUndoStack(this);</span><br><span class="line"></span><br><span class="line">    /* 用于容纳左侧标签与按钮布局 */</span><br><span class="line">    widget = new QWidget();</span><br><span class="line"></span><br><span class="line">    /* 历史记录面板实例化 */</span><br><span class="line">    undoView = new QUndoView(undoStack);</span><br><span class="line"></span><br><span class="line">    /* 实例化一个按钮，用于加一操作 */</span><br><span class="line">    pushButton = new QPushButton();</span><br><span class="line"></span><br><span class="line">    /* 标签，用于显示计算结果 */</span><br><span class="line">    label = new QLabel();</span><br><span class="line"></span><br><span class="line">    /* 设置widget的大小 */</span><br><span class="line">    widget-&gt;setMinimumSize(400, 480);</span><br><span class="line"></span><br><span class="line">    /* 将两个widget添加到水平布局 */</span><br><span class="line">    hLayout-&gt;addWidget(widget);</span><br><span class="line">    hLayout-&gt;addWidget(undoView);</span><br><span class="line"></span><br><span class="line">    /* 初始化count的值 */</span><br><span class="line">    count = 0;</span><br><span class="line"></span><br><span class="line">    /* 显示初始化计算结果 */</span><br><span class="line">    label-&gt;setText(&quot;计算结果：&quot; + QString::number(count));</span><br><span class="line">    label-&gt;setAlignment(Qt::AlignCenter);</span><br><span class="line"></span><br><span class="line">    /* 左侧布局 */</span><br><span class="line">    vLayout-&gt;addWidget(label);</span><br><span class="line">    vLayout-&gt;addWidget(pushButton);</span><br><span class="line"></span><br><span class="line">    /* 左侧布局控件的高度设置 */</span><br><span class="line">    label-&gt;setMaximumHeight(this-&gt;height() / 5);</span><br><span class="line">    pushButton-&gt;setMaximumHeight(this-&gt;height() / 5);</span><br><span class="line"></span><br><span class="line">    /* 按钮文件设置 */</span><br><span class="line">    pushButton-&gt;setText(&quot;加1&quot;);</span><br><span class="line"></span><br><span class="line">    /* 设置widget的布局为vLayout */</span><br><span class="line">    widget-&gt;setLayout(vLayout);</span><br><span class="line"></span><br><span class="line">    /* 将主窗体的布局设置为hLayout */</span><br><span class="line">    mainWidget-&gt;setLayout(hLayout);</span><br><span class="line"></span><br><span class="line">    /* 设置mainWidget为主窗体的居中widget */</span><br><span class="line">    this-&gt;setCentralWidget(mainWidget);</span><br><span class="line"></span><br><span class="line">    /* 信号槽连接，按钮点击，执行加一操作 */</span><br><span class="line">    connect(pushButton, SIGNAL(clicked()), this,</span><br><span class="line">            SLOT(pushButtonClieked()));</span><br><span class="line"></span><br><span class="line">    /* 信号槽连接，历史记录项index发生变化，显示count大小 */</span><br><span class="line">    connect(undoStack, SIGNAL(indexChanged(int) ),</span><br><span class="line">            this, SLOT(showCountValue(int)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 入栈操作会自动调用addCommand的redo */</span><br><span class="line">void MainWindow::pushButtonClieked()</span><br><span class="line">&#123;</span><br><span class="line">    /* 变量值加一 */</span><br><span class="line">    count++;</span><br><span class="line"></span><br><span class="line">    /* value指向count的地址 */</span><br><span class="line">    int *value = &amp;count;</span><br><span class="line"></span><br><span class="line">    /* 用重写的addCommand类实例化 */</span><br><span class="line">    QUndoCommand *add = new addCommand(value);</span><br><span class="line"></span><br><span class="line">    /* 入栈 */</span><br><span class="line">    undoStack-&gt;push(add);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::showCountValue(int)</span><br><span class="line">&#123;</span><br><span class="line">    /* 标签用于显示计算结果 */</span><br><span class="line">    label-&gt;setText(&quot;计算结果：&quot; + QString::number(count));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>command.h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#ifndef COMMAND_H</span><br><span class="line">#define COMMAND_H</span><br><span class="line"></span><br><span class="line">#include &lt;QUndoCommand&gt;</span><br><span class="line">#include &lt;QObject&gt;</span><br><span class="line"></span><br><span class="line">class addCommand : public QUndoCommand</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    addCommand(int *value, QUndoCommand* parent = 0);</span><br><span class="line">    ~addCommand();</span><br><span class="line"></span><br><span class="line">    /* 重写重做与撤回方法 */</span><br><span class="line">    void redo() override;</span><br><span class="line">    void undo() override;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    /* 新的count */</span><br><span class="line">    int *new_count;</span><br><span class="line"></span><br><span class="line">    /* 旧的count */</span><br><span class="line">    int old_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // COMMAND_H</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>command.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;command.h&quot;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line"></span><br><span class="line">addCommand::addCommand(int *value, QUndoCommand *parent)</span><br><span class="line">&#123;</span><br><span class="line">    /* 使用Q_UNUSED,避免未使用的数据类型 */</span><br><span class="line">    Q_UNUSED(parent);</span><br><span class="line"></span><br><span class="line">    /* undoView显示的操作信息 */</span><br><span class="line">    setText(&quot;进行了加1操作&quot;);</span><br><span class="line"></span><br><span class="line">    /* value的地址赋值给new_count */</span><br><span class="line">    new_count = value;</span><br><span class="line"></span><br><span class="line">    /* 让构造函数传过来的*new_count的值赋值给old_count */</span><br><span class="line">    old_count = *new_count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 执行stack push时或者重做操作时会自动调用 */</span><br><span class="line">void addCommand::redo()</span><br><span class="line">&#123;</span><br><span class="line">    /* 重新赋值给new_count */</span><br><span class="line">    *new_count = old_count;</span><br><span class="line"></span><br><span class="line">    /* 打印出*new_count的值 */</span><br><span class="line">    qDebug()&lt;&lt;&quot;redo:&quot;&lt;&lt;*new_count&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 回撤操作时执行 */</span><br><span class="line">void addCommand::undo()</span><br><span class="line">&#123;</span><br><span class="line">    /* 回撤操作每次应减一 */</span><br><span class="line">    (*new_count)--;</span><br><span class="line"></span><br><span class="line">    /* 打印出*new_count的值 */</span><br><span class="line">    qDebug()&lt;&lt;&quot;undo:&quot;&lt;&lt;*new_count&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addCommand::~addCommand()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-4"><a href="#ui示例-4" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E9%A1%B9%E7%9B%AE%E8%A7%86%E5%9B%BE%E7%BB%84/image-20230921135931326.png" alt="image-20230921135931326"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt项目视图组&quot;&gt;&lt;a href=&quot;#Qt项目视图组&quot; class=&quot;headerlink&quot; title=&quot;Qt项目视图组&quot;&gt;&lt;/a&gt;Qt项目视图组&lt;/h2&gt;&lt;h3 id=&quot;QListView&quot;&gt;&lt;a href=&quot;#QListView&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt容器</title>
    <link href="http://example.com/2023/09/20/Qt%E5%AE%B9%E5%99%A8/"/>
    <id>http://example.com/2023/09/20/Qt%E5%AE%B9%E5%99%A8/</id>
    <published>2023-09-20T05:27:12.000Z</published>
    <updated>2023-09-20T07:53:38.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt容器"><a href="#Qt容器" class="headerlink" title="Qt容器"></a>Qt容器</h2><h3 id="QGroupBox"><a href="#QGroupBox" class="headerlink" title="QGroupBox"></a>QGroupBox</h3><p>QGroupBox 小部件提供一个带有标题的组框框架。 一般与一组或者是同类型的部件一起使用。  </p><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QList&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    groupBox = new QGroupBox(tr(&quot;QGroupBox示例&quot;),this);</span><br><span class="line">//    groupBox-&gt;setTitle(&quot;QGroupBox示例&quot;);</span><br><span class="line">    groupBox-&gt;setGeometry(300,100,300,200);</span><br><span class="line">    vBoxLayout = new QVBoxLayout();</span><br><span class="line"></span><br><span class="line">    QList &lt;QString&gt; list;</span><br><span class="line">    list&lt;&lt;&quot;Choice1&quot;&lt;&lt;&quot;Choice2&quot;&lt;&lt;&quot;Choice3&quot;;</span><br><span class="line"></span><br><span class="line">    for(int i = 0;i &lt; 3;i ++)&#123;</span><br><span class="line">        radioButton[i] = new QRadioButton(this);</span><br><span class="line">        radioButton[i]-&gt;setText(list[i]);</span><br><span class="line">        vBoxLayout-&gt;addWidget(radioButton[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    /*添加一个伸缩量*/</span><br><span class="line">    vBoxLayout-&gt;addStretch(1);</span><br><span class="line">    groupBox-&gt;setLayout(vBoxLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例"><a href="#ui示例" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E5%AE%B9%E5%99%A8/image-20230920134509428.png" alt="image-20230920134509428"></p><h3 id="QScrollArea"><a href="#QScrollArea" class="headerlink" title="QScrollArea"></a>QScrollArea</h3><p>QScrollArea 类提供到另一个小部件的滚动视图  </p><h5 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    scrollArea = new QScrollArea(this);</span><br><span class="line"></span><br><span class="line">    /*设置滚动区域*/</span><br><span class="line">    scrollArea-&gt;setGeometry(50,50,700,380);</span><br><span class="line">    label = new QLabel();</span><br><span class="line">    /*标签显示图片，分辨率为1076 * 500*/</span><br><span class="line">    QImage image(&quot;:/images/lantingxu.png&quot;);</span><br><span class="line">    label-&gt;setPixmap(QPixmap::fromImage((image)));</span><br><span class="line">    scrollArea-&gt;setWidget(label);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-1"><a href="#ui示例-1" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E5%AE%B9%E5%99%A8/image-20230920140141323.png" alt="image-20230920140141323"></p><h3 id="QToolBox"><a href="#QToolBox" class="headerlink" title="QToolBox"></a>QToolBox</h3><p>QToolBox（工具盒类）提供了一种列状的层叠窗体，中文译为工具箱，类似抽屉。  </p><h5 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QList&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    toolBox = new QToolBox(this);</span><br><span class="line">    toolBox-&gt;setGeometry(300,50,200,250);</span><br><span class="line">    /*设置toolBox的样式*/</span><br><span class="line">    toolBox-&gt;setStyleSheet(&quot;QToolBox &#123;backgroud-color:rgba&#123;0,0,0,30%)&#125;&quot;);</span><br><span class="line">    for(int i = 0;i &lt; 2;i ++)&#123;</span><br><span class="line">        vBoxLayout[i] = new QVBoxLayout(this);</span><br><span class="line">        groupBox[i] = new QGroupBox(this);</span><br><span class="line">    &#125;</span><br><span class="line">    QList &lt;QString&gt; strList;</span><br><span class="line">    strList&lt;&lt;&quot;李白&quot;&lt;&lt;&quot;王昭君&quot;&lt;&lt;&quot;李元芳&quot;&lt;&lt;&quot;程咬金&quot;&lt;&lt;&quot;钟馗&quot;&lt;&lt;&quot;上官婉儿&quot;;</span><br><span class="line">    QList &lt;QString&gt; iconList;</span><br><span class="line">    iconList&lt;&lt;&quot;:/icons/libai&quot;&lt;&lt;&quot;:/icons/wangzhaojun&quot;&lt;&lt;&quot;:/icons/liyuanfang&quot;</span><br><span class="line">           &lt;&lt;&quot;:/icons/chengyaojin&quot;&lt;&lt;&quot;:/icons/zhongkui&quot;&lt;&lt;&quot;:/icons/shangguanwaner&quot;;</span><br><span class="line">    for(int i = 0;i &lt; 6;i ++)&#123;</span><br><span class="line">        toolButton[i] = new QToolButton(this);</span><br><span class="line">        /*设置toolButton图标*/</span><br><span class="line">        toolButton[i]-&gt;setIcon(QIcon(iconList[i]));</span><br><span class="line">        /*设置toolButton文本*/</span><br><span class="line">        toolButton[i]-&gt;setText(strList[i]);</span><br><span class="line">        /*设置toolButton 的大小*/</span><br><span class="line">        toolButton[i]-&gt;setFixedSize(150,40);</span><br><span class="line">        /*设置toolButton的样式*/</span><br><span class="line">        toolButton[i]-&gt;setToolButtonStyle(Qt::ToolButtonTextBesideIcon);</span><br><span class="line">        if(i &lt; 3)&#123;</span><br><span class="line">            /*添加到垂直布局*/</span><br><span class="line">            vBoxLayout[0]-&gt;addWidget(toolButton[i]);</span><br><span class="line">            /*添加一个伸缩量*/</span><br><span class="line">            vBoxLayout[0]-&gt;addStretch(1);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            vBoxLayout[1]-&gt;addWidget(toolButton[i]);</span><br><span class="line">            vBoxLayout[1]-&gt;addStretch(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /*将垂直布局添加到groupBox*/</span><br><span class="line">    groupBox[0]-&gt;setLayout(vBoxLayout[0]);</span><br><span class="line">    groupBox[1]-&gt;setLayout(vBoxLayout[1]);</span><br><span class="line"></span><br><span class="line">    /*将groupBox添加到QToolBox*/</span><br><span class="line">    toolBox-&gt;addItem(groupBox[0],&quot;我的好友&quot;);</span><br><span class="line">    toolBox-&gt;addItem(groupBox[1],&quot;黑名单&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-2"><a href="#ui示例-2" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E5%AE%B9%E5%99%A8/image-20230920142910032.png" alt="image-20230920142910032"></p><h3 id="QTabWidget"><a href="#QTabWidget" class="headerlink" title="QTabWidget"></a>QTabWidget</h3><p>QTabWidget 继承 QWidget， QTabWidget 类提供了一组选项卡（多页面）小部件。 QTabWidget 主要是用来分页显示的，每一页一个界面，众多界面公用一块区域，节省了界面大小，很方便的为用户显示更多的信息。  </p><h5 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QList&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    widget = new QWidget(this);</span><br><span class="line">    this-&gt;setCentralWidget(widget);</span><br><span class="line"></span><br><span class="line">    /*多页面小部件*/</span><br><span class="line">    tabWidget = new QTabWidget(this);</span><br><span class="line">    /*水平布局实例化*/</span><br><span class="line">    hBoxLayout = new QHBoxLayout(this);</span><br><span class="line">    QList &lt;QString&gt; labelList;</span><br><span class="line">    labelList&lt;&lt;&quot;tag1&quot;&lt;&lt;&quot;tag2&quot;&lt;&lt;&quot;tag3&quot;;</span><br><span class="line"></span><br><span class="line">    QList &lt;QString&gt; tabList;</span><br><span class="line">    tabList&lt;&lt;&quot;page1&quot;&lt;&lt;&quot;page2&quot;&lt;&lt;&quot;page3&quot;;</span><br><span class="line"></span><br><span class="line">    QList &lt;QString&gt; iconList;</span><br><span class="line">    iconList&lt;&lt;&quot;:/icons/icon1.png&quot;&lt;&lt;&quot;:/icons/icon2.png&quot;&lt;&lt;&quot;:/icons/icon3.png&quot;;</span><br><span class="line">    for(int i = 0;i &lt; 3;i ++)&#123;</span><br><span class="line">        label[i] = new QLabel(this);</span><br><span class="line">        label[i]-&gt;setText(labelList[i]);</span><br><span class="line">        /*设置标签对其方式居中*/</span><br><span class="line">        label[i]-&gt;setAlignment(Qt::AlignCenter);</span><br><span class="line">        /*添加页面*/</span><br><span class="line">        tabWidget-&gt;addTab(label[i],QIcon(iconList[i]),tabList[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    /*添加关闭按钮*/</span><br><span class="line">    tabWidget-&gt;setTabsClosable(true);</span><br><span class="line">    /*将tabWidget水平排布*/</span><br><span class="line">    hBoxLayout-&gt;addWidget(tabWidget);</span><br><span class="line">    /*将垂直布局设置到widget*/</span><br><span class="line">    widget-&gt;setLayout(hBoxLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-3"><a href="#ui示例-3" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E5%AE%B9%E5%99%A8/image-20230920145101251.png" alt="image-20230920145101251"></p><h3 id="QStackedWidget"><a href="#QStackedWidget" class="headerlink" title="QStackedWidget"></a>QStackedWidget</h3><p>QStackedWidget 继承 QFrame。 QStackedWidget 类提供了一个小部件堆栈，其中一次只能看到一个小部件，与 QQ 的设置面板类似。  QStackedWidget 可 用 于 创 建 类 似 于 QTabWidget 提 供 的 用 户 界 面 。 它 是 构 建 在QStackedLayout 类之上的一个方便的布局小部件。常与 QListWidget 搭配使用，效果如下图，左边的是 QListWidget 列表，右边的是 QStackedWidget。他们一般与信号槽连接，通过点击左边的 QListWidget 列表，使用信号槽连接后，就可以让右边的 QStackedWidget 显示不同的内容，每次显示一个 widget 小部件。  </p><h5 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QList&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    widget = new QWidget(this);</span><br><span class="line">    this-&gt;setCentralWidget(widget);</span><br><span class="line">    hBoxLayout = new QHBoxLayout(this);</span><br><span class="line">    stackedWidget = new QStackedWidget(this);</span><br><span class="line">    listWidget = new QListWidget(this);</span><br><span class="line"></span><br><span class="line">    QList &lt;QString&gt; listWidgetList;</span><br><span class="line">    listWidgetList&lt;&lt;&quot;windows1&quot;&lt;&lt;&quot;windows2&quot;&lt;&lt;&quot;windows3&quot;;</span><br><span class="line"></span><br><span class="line">    for(int i = 0;i &lt; 3;i ++)&#123;</span><br><span class="line">        /*listWidget插入项*/</span><br><span class="line">        listWidget-&gt;insertItem(i,listWidgetList[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    QList &lt;QString&gt; labelList;</span><br><span class="line">    labelList&lt;&lt;&quot;label1&quot;&lt;&lt;&quot;label2&quot;&lt;&lt;&quot;label3&quot;;</span><br><span class="line">    for(int i = 0;i &lt; 3;i ++)&#123;</span><br><span class="line">        label[i] = new QLabel(this);</span><br><span class="line">        label[i]-&gt;setText(labelList[i]);</span><br><span class="line">        /*设置label居中*/</span><br><span class="line">        label[i]-&gt;setAlignment(Qt::AlignCenter);</span><br><span class="line">        /*添加页面*/</span><br><span class="line">        stackedWidget-&gt;addWidget(label[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*设置列表的最大宽度*/</span><br><span class="line">    listWidget-&gt;setMaximumWidth(100);</span><br><span class="line">    /*添加到水平布局*/</span><br><span class="line">    hBoxLayout-&gt;addWidget(listWidget);</span><br><span class="line">    hBoxLayout-&gt;addWidget(stackedWidget);</span><br><span class="line"></span><br><span class="line">    widget-&gt;setLayout(hBoxLayout);</span><br><span class="line">    /*使用listWidget的信号函数currentRowChanged 和槽函数setCurrentIndex进行连接*/</span><br><span class="line">    connect(listWidget,SIGNAL(currentRowChanged(int)),stackedWidget,SLOT(setCurrentIndex(int)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-4"><a href="#ui示例-4" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E5%AE%B9%E5%99%A8/image-20230920151823271.png" alt="image-20230920151823271"></p><h3 id="QMdiArea"><a href="#QMdiArea" class="headerlink" title="QMdiArea"></a>QMdiArea</h3><p>QMdiArea 小部件提供一个显示 MDI 窗口的区域。QMdiArea的功能本质上类似于MDI窗口的窗口管理器。  </p><h5 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    pushButton = new QPushButton(this);</span><br><span class="line">    pushButton-&gt;setText(&quot;新建窗口&quot;);</span><br><span class="line">    pushButton-&gt;setGeometry(0,30,100,30);</span><br><span class="line"></span><br><span class="line">    mdiArea = new QMdiArea(this);</span><br><span class="line"></span><br><span class="line">    /*设置MDI Area区域大小*/</span><br><span class="line">    mdiArea-&gt;setGeometry(100,30,700,430);</span><br><span class="line">    /*连接信号槽*/</span><br><span class="line">    connect(pushButton,SIGNAL(clicked()),this,SLOT(creat_MidSubWindow()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::creat_MidSubWindow()&#123;</span><br><span class="line">    mdiSubWindow = new QMdiSubWindow();</span><br><span class="line">    mdiSubWindow-&gt;setWindowTitle(&quot;新建窗口&quot;);</span><br><span class="line">    /*设置窗口的属性，接收窗口关闭事件之后，QT会释放这个窗口占用的资源*/</span><br><span class="line">    mdiSubWindow-&gt;setAttribute(Qt::WA_DeleteOnClose);</span><br><span class="line"></span><br><span class="line">    /*添加子窗口*/</span><br><span class="line">    mdiArea-&gt;addSubWindow(mdiSubWindow);</span><br><span class="line">    /*显示窗口，不设置时为不显示*/</span><br><span class="line">    mdiSubWindow-&gt;show();</span><br><span class="line">    /*自适应窗口*/</span><br><span class="line">    mdiSubWindow-&gt;sizePolicy();</span><br><span class="line">    /*以平铺的方式排列所有窗口*/</span><br><span class="line">    mdiArea-&gt;tileSubWindows();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-5"><a href="#ui示例-5" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E5%AE%B9%E5%99%A8/image-20230920154237249.png" alt="image-20230920154237249"></p><h3 id="QDockWidget"><a href="#QDockWidget" class="headerlink" title="QDockWidget"></a>QDockWidget</h3><p>QDockWidget继承QWidget。QDockWidget类提供了一个小部件，可以停靠在QMainWindow内，也可以作为桌面的顶级窗口浮动。  QDockWidget 提供了停靠部件的概念，也称为工具面板或实用程序窗口。停靠窗口是放置<br>在 QMainWindow 中央窗口附近的停靠窗口部件区域中的辅助窗口。停靠窗口可以被移动到当前区域内，移动到新的区域，并由终端用户浮动(例如，不停靠)。  </p><h5 id="代码示例-6"><a href="#代码示例-6" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    /*实例化标题为停靠窗口*/</span><br><span class="line">    dockWidget = new QDockWidget(&quot;停靠窗口&quot;,this);</span><br><span class="line"></span><br><span class="line">    textEdit = new QTextEdit(dockWidget);</span><br><span class="line">    textEdit-&gt;setText(&quot;this is demo&quot;);</span><br><span class="line"></span><br><span class="line">    dockWidget-&gt;setWidget(textEdit);</span><br><span class="line">    /*放在主窗体的顶部*/</span><br><span class="line">    this-&gt;addDockWidget(Qt::TopDockWidgetArea,dockWidget);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ui示例-6"><a href="#ui示例-6" class="headerlink" title="ui示例"></a>ui示例</h5><p><img src="/2023/09/20/Qt%E5%AE%B9%E5%99%A8/image-20230920155336450.png" alt="image-20230920155336450"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt容器&quot;&gt;&lt;a href=&quot;#Qt容器&quot; class=&quot;headerlink&quot; title=&quot;Qt容器&quot;&gt;&lt;/a&gt;Qt容器&lt;/h2&gt;&lt;h3 id=&quot;QGroupBox&quot;&gt;&lt;a href=&quot;#QGroupBox&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt布局管理</title>
    <link href="http://example.com/2023/09/20/Qt%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2023/09/20/Qt%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86/</id>
    <published>2023-09-20T01:39:49.000Z</published>
    <updated>2023-09-20T05:22:33.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt布局管理"><a href="#Qt布局管理" class="headerlink" title="Qt布局管理"></a>Qt布局管理</h2><h3 id="QBoxLayout"><a href="#QBoxLayout" class="headerlink" title="QBoxLayout"></a>QBoxLayout</h3><p>QBoxLayout 继承 QLayout。 QBoxLayout 类提供水平或垂直地排列子部件。 QBoxLayout 获取从它的父布局或从 parentWidget()中所获得的空间，将其分成一列框，并使每个托管小部件填充一个框。  </p><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QList&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    hWidget = new QWidget(this);</span><br><span class="line">    hWidget-&gt;setGeometry(0,0,800,240);</span><br><span class="line"></span><br><span class="line">    vWidget = new QWidget(this);</span><br><span class="line">    vWidget-&gt;setGeometry(0,240,200,240);</span><br><span class="line"></span><br><span class="line">    hBoxLayout = new QHBoxLayout(this);</span><br><span class="line">    vBoxLayout = new QVBoxLayout(this);</span><br><span class="line"></span><br><span class="line">    /*使用QList链表*/</span><br><span class="line">    QList &lt;QString&gt; list;</span><br><span class="line">    list&lt;&lt;&quot;one&quot;&lt;&lt;&quot;two&quot;&lt;&lt;&quot;three&quot;&lt;&lt;&quot;four&quot;&lt;&lt;&quot;five&quot;&lt;&lt;&quot;six&quot;;</span><br><span class="line">    /*实例化PushButton*/</span><br><span class="line">    for(int i = 0;i &lt; 6;i ++)&#123;</span><br><span class="line">        button[i] = new QPushButton(this);</span><br><span class="line">        button[i]-&gt;setText(list[i]);</span><br><span class="line">        if(3 &gt; i)&#123;</span><br><span class="line">            /*将按钮添加到hBoxLayout*/</span><br><span class="line">            hBoxLayout-&gt;addWidget(button[i]);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            vBoxLayout-&gt;addWidget(button[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /*设置按钮间隔为50*/</span><br><span class="line">    hBoxLayout-&gt;setSpacing(50);</span><br><span class="line">    hWidget-&gt;setLayout(hBoxLayout);</span><br><span class="line">    vWidget-&gt;setLayout(vBoxLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QGridLayout"><a href="#QGridLayout" class="headerlink" title="QGridLayout"></a>QGridLayout</h3><p>QGridLayout 类提供了布局管理器里的一种以网格（二维）的方式管理界面组件  </p><p>QGridLayout获取可用的空间(通过其父布局或parentWidget()))，将其分为行和列，并将其管理的每个小部件放入正确的单元格中。由于网格布局管理器中的组件也是会随着窗口拉伸而发生变化的，所以也是需要设置组件之间的比例系数的，与QBoxLayout 不同的是网格布局管理器还需要分别设置行和列的比例系数。  </p><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QList&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    gWidget = new QWidget(this);</span><br><span class="line">    /*设置gWidget居中央*/</span><br><span class="line">    this-&gt;setCentralWidget(gWidget);</span><br><span class="line">    gridLayout = new QGridLayout();</span><br><span class="line"></span><br><span class="line">    QList &lt;QString&gt; list;</span><br><span class="line">    list&lt;&lt;&quot;button1&quot;&lt;&lt;&quot;button2&quot;&lt;&lt;&quot;button3&quot;&lt;&lt;&quot;button4&quot;&lt;&lt;&quot;button5&quot;&lt;&lt;&quot;button6&quot;;</span><br><span class="line"></span><br><span class="line">    for(int i = 0;i &lt; 4;i ++)&#123;</span><br><span class="line">        button[i] = new QPushButton(this);</span><br><span class="line">        button[i]-&gt;setText(list[i]);</span><br><span class="line">        /*设置按钮的最小宽度与高度*/</span><br><span class="line">        button[i]-&gt;setMaximumSize(100,30);</span><br><span class="line">        /*设置自动调整按钮大小*/</span><br><span class="line">        button[i]-&gt;setSizePolicy(</span><br><span class="line">                    QSizePolicy::Expanding,</span><br><span class="line">                    QSizePolicy::Expanding</span><br><span class="line">                    );</span><br><span class="line">        switch(i)&#123;</span><br><span class="line">        case 0:</span><br><span class="line">            /*将button添加到网格的坐标(0,0)*/</span><br><span class="line">            gridLayout-&gt;addWidget(button[i],0,0);</span><br><span class="line">            break;</span><br><span class="line">        case 1:</span><br><span class="line">            gridLayout-&gt;addWidget(button[i],0,1);</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            gridLayout-&gt;addWidget(button[i],1,0);</span><br><span class="line">            break;</span><br><span class="line">        case 3:</span><br><span class="line">            gridLayout-&gt;addWidget(button[i],1,1);</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /*设置0,1行的行比例系数*/</span><br><span class="line">    gridLayout-&gt;setRowStretch(0,2);</span><br><span class="line">    gridLayout-&gt;setRowStretch(1,3);</span><br><span class="line">    /*设置0,1列的列比例系数*/</span><br><span class="line">    gridLayout-&gt;setColumnStretch(0,1);</span><br><span class="line">    gridLayout-&gt;setColumnStretch(1,3);</span><br><span class="line"></span><br><span class="line">    gWidget-&gt;setLayout(gridLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QFormLayout"><a href="#QFormLayout" class="headerlink" title="QFormLayout"></a>QFormLayout</h3><p>QFormLayout 继承 QLayout。 QFormLayout 类管理输入小部件及其关联标签的表单。 QFormLayout 是一个方便的布局类，它以两列的形式布局其子类。左列由标签组成，右列由“字段”小部件(QLineEdit(行编辑器)、 QSpinBox(旋转框等))组成。通常使用 setRowWrapPolicy(RowWrapPolicy policy)接口函数设置布局的换行策略进行布局等。   </p><h5 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QList&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    gWidget = new QWidget(this);</span><br><span class="line">    /*设置gWidget居中央*/</span><br><span class="line">    this-&gt;setCentralWidget(gWidget);</span><br><span class="line">    gridLayout = new QGridLayout();</span><br><span class="line"></span><br><span class="line">    QList &lt;QString&gt; list;</span><br><span class="line">    list&lt;&lt;&quot;button1&quot;&lt;&lt;&quot;button2&quot;&lt;&lt;&quot;button3&quot;&lt;&lt;&quot;button4&quot;&lt;&lt;&quot;button5&quot;&lt;&lt;&quot;button6&quot;;</span><br><span class="line"></span><br><span class="line">    for(int i = 0;i &lt; 4;i ++)&#123;</span><br><span class="line">        button[i] = new QPushButton(this);</span><br><span class="line">        button[i]-&gt;setText(list[i]);</span><br><span class="line">        /*设置按钮的最小宽度与高度*/</span><br><span class="line">        button[i]-&gt;setMaximumSize(100,30);</span><br><span class="line">        /*设置自动调整按钮大小*/</span><br><span class="line">        button[i]-&gt;setSizePolicy(</span><br><span class="line">                    QSizePolicy::Expanding,</span><br><span class="line">                    QSizePolicy::Expanding</span><br><span class="line">                    );</span><br><span class="line">        switch(i)&#123;</span><br><span class="line">        case 0:</span><br><span class="line">            /*将button添加到网格的坐标(0,0)*/</span><br><span class="line">            gridLayout-&gt;addWidget(button[i],0,0);</span><br><span class="line">            break;</span><br><span class="line">        case 1:</span><br><span class="line">            gridLayout-&gt;addWidget(button[i],0,1);</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            gridLayout-&gt;addWidget(button[i],1,0);</span><br><span class="line">            break;</span><br><span class="line">        case 3:</span><br><span class="line">            gridLayout-&gt;addWidget(button[i],1,1);</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /*设置0,1行的行比例系数*/</span><br><span class="line">    gridLayout-&gt;setRowStretch(0,2);</span><br><span class="line">    gridLayout-&gt;setRowStretch(1,3);</span><br><span class="line">    /*设置0,1列的列比例系数*/</span><br><span class="line">    gridLayout-&gt;setColumnStretch(0,1);</span><br><span class="line">    gridLayout-&gt;setColumnStretch(1,3);</span><br><span class="line"></span><br><span class="line">    gWidget-&gt;setLayout(gridLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QSpacerItem"><a href="#QSpacerItem" class="headerlink" title="QSpacerItem"></a>QSpacerItem</h3><p>QSpacerItem 类在布局中提供空白(空间间隔)。所以 QSpacerItem 是在布局中使用的。  </p><h5 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QList&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    widget = new QWidget(this);</span><br><span class="line">    /*设置widget居中*/</span><br><span class="line">    this-&gt;setCentralWidget(widget);</span><br><span class="line">    /*实例化QSpacerItem*/</span><br><span class="line">    vSpacer = new QSpacerItem(10,10,QSizePolicy::Minimum,QSizePolicy::Expanding);</span><br><span class="line">    hSpacer = new QSpacerItem(10,10,QSizePolicy::Expanding,QSizePolicy::Minimum);</span><br><span class="line"></span><br><span class="line">    mainLayout = new QHBoxLayout();</span><br><span class="line">    hBoxLayout = new QHBoxLayout();</span><br><span class="line">    vBoxLayout = new QVBoxLayout();</span><br><span class="line"></span><br><span class="line">    /*在VboxLayout添加垂直间隔*/</span><br><span class="line">    vBoxLayout-&gt;addSpacerItem(vSpacer);</span><br><span class="line"></span><br><span class="line">    QList &lt;QString&gt; list;</span><br><span class="line">    list&lt;&lt;&quot;bt1&quot;&lt;&lt;&quot;bt2&quot;&lt;&lt;&quot;bt3&quot;&lt;&lt;&quot;bt4&quot;&lt;&lt;&quot;bt5&quot;&lt;&lt;&quot;bt6&quot;;</span><br><span class="line"></span><br><span class="line">    for(int i = 0;i &lt; 6;i ++)&#123;</span><br><span class="line">        button[i] = new QPushButton(this);</span><br><span class="line">        button[i]-&gt;setText(list[i]);</span><br><span class="line">        if(3 &gt; i)&#123;</span><br><span class="line">            /*按钮1设置大小为100 * 100*/</span><br><span class="line">            button[i]-&gt;setFixedSize(60,30);</span><br><span class="line">            /*在vboxLayout添加按钮*/</span><br><span class="line">            vBoxLayout-&gt;addWidget(button[i]);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            button[i]-&gt;setFixedSize(60,30);</span><br><span class="line">            hBoxLayout-&gt;addWidget(button[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /*在hBoxLayout里面添加水平间隔*/</span><br><span class="line">    hBoxLayout-&gt;addSpacerItem(hSpacer);</span><br><span class="line">    /*在主布局俩面添加垂直布局*/</span><br><span class="line">    mainLayout-&gt;addLayout(vBoxLayout);</span><br><span class="line">    /*在主布局里面添加水平布局*/</span><br><span class="line">    mainLayout-&gt;addLayout(hBoxLayout);</span><br><span class="line">    /*设置部件之间的间距*/</span><br><span class="line">    mainLayout-&gt;setSpacing(30);</span><br><span class="line">    widget-&gt;setLayout(mainLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt布局管理&quot;&gt;&lt;a href=&quot;#Qt布局管理&quot; class=&quot;headerlink&quot; title=&quot;Qt布局管理&quot;&gt;&lt;/a&gt;Qt布局管理&lt;/h2&gt;&lt;h3 id=&quot;QBoxLayout&quot;&gt;&lt;a href=&quot;#QBoxLayout&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>window下面实现C串口</title>
    <link href="http://example.com/2023/09/19/window%E4%B8%8B%E9%9D%A2%E5%AE%9E%E7%8E%B0C%E4%B8%B2%E5%8F%A3/"/>
    <id>http://example.com/2023/09/19/window%E4%B8%8B%E9%9D%A2%E5%AE%9E%E7%8E%B0C%E4%B8%B2%E5%8F%A3/</id>
    <published>2023-09-19T12:59:20.000Z</published>
    <updated>2023-09-19T13:11:11.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在windows下面实现C串口"><a href="#在windows下面实现C串口" class="headerlink" title="在windows下面实现C串口"></a>在windows下面实现C串口</h2><p>代码示例如下</p><p>SerialC.h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __SERIALC_H</span><br><span class="line">#define __SERIALC_H</span><br><span class="line"></span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot;</span><br><span class="line">&#123;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    typedef HANDLE PORT;</span><br><span class="line"></span><br><span class="line">    extern PORT OpenPort(int idCom);</span><br><span class="line">    extern void ClosePort(PORT idCom);</span><br><span class="line">    extern int SetPortBoudrate(PORT idCom, int rate);</span><br><span class="line">    extern int SetPortDateBits(PORT idCom, int bits);</span><br><span class="line">    extern int SetPortStopBits(PORT idCom, int bits);</span><br><span class="line">    extern int SetPortParity(PORT idCom, int parity);</span><br><span class="line">    extern int GetPortBoudrate(PORT idCom);</span><br><span class="line">    extern int GetPortDataBits(PORT idCom);</span><br><span class="line">    extern int GetPortStopBits(PORT idCom);</span><br><span class="line">    extern int GetPortParity(PORT idCom);</span><br><span class="line">    extern int PortSendDate(PORT idCom, const char *date);</span><br><span class="line">    extern int PortReceiveDate(PORT idCom, char *date, int len);</span><br><span class="line">    extern PORT SerialPortInit(int idCom, int rate, int dateBits, int stopBits, int parity);</span><br><span class="line">    extern int SerialReceiveDate(PORT idCom, char *date, int len);</span><br><span class="line">    extern int SerialSendDate(PORT idCom, const char *date, int len);</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SerialC.c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;SerialC.h&quot;</span><br><span class="line"></span><br><span class="line">// #define SDebug</span><br><span class="line">#ifdef SDebug</span><br><span class="line">#define SerialDebug(...) printf(__VA_ARGS__)</span><br><span class="line">#else</span><br><span class="line">#define SerialDebug(...)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">PORT OpenPort(int idCom)</span><br><span class="line">&#123;</span><br><span class="line">PORT Com;</span><br><span class="line">TCHAR ComName[128] = &#123;0&#125;;</span><br><span class="line">wsprintf(ComName, TEXT(&quot;\\\\.\\COM%d&quot;), idCom);</span><br><span class="line">Com = CreateFile(ComName,</span><br><span class="line"> GENERIC_READ | GENERIC_WRITE,</span><br><span class="line"> 0,</span><br><span class="line"> NULL,</span><br><span class="line"> OPEN_EXISTING,</span><br><span class="line"> 0,</span><br><span class="line"> NULL);</span><br><span class="line"></span><br><span class="line">if (Com == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">COMMTIMEOUTS timeOuts = &#123;0&#125;;</span><br><span class="line">timeOuts.ReadIntervalTimeout = 50;</span><br><span class="line">timeOuts.ReadTotalTimeoutConstant = 50;</span><br><span class="line">timeOuts.ReadTotalTimeoutMultiplier = 10;</span><br><span class="line">timeOuts.WriteTotalTimeoutConstant = 50;</span><br><span class="line">timeOuts.WriteTotalTimeoutMultiplier = 10;</span><br><span class="line"></span><br><span class="line">if (SetCommTimeouts(Com, &amp;timeOuts) == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">if (SetCommMask(Com, EV_RXCHAR) == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">SerialDebug(&quot;Open %d Success\r\n&quot;, idCom);</span><br><span class="line">return Com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ClosePort(PORT idCom)</span><br><span class="line">&#123;</span><br><span class="line">CloseHandle(idCom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SetPortBoudrate(PORT idCom, int rate)</span><br><span class="line">&#123;</span><br><span class="line">DCB dcbSerial = &#123;0&#125;;</span><br><span class="line">BOOL Status;</span><br><span class="line">dcbSerial.DCBlength = sizeof(dcbSerial);</span><br><span class="line">Status = GetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return FALSE;</span><br><span class="line">&#125;</span><br><span class="line">dcbSerial.BaudRate = rate;</span><br><span class="line">Status = SetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">return Status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SetPortDateBits(PORT idCom, int bits)</span><br><span class="line">&#123;</span><br><span class="line">DCB dcbSerial = &#123;0&#125;;</span><br><span class="line">BOOL Status;</span><br><span class="line">dcbSerial.DCBlength = sizeof(dcbSerial);</span><br><span class="line">Status = GetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return FALSE;</span><br><span class="line">&#125;</span><br><span class="line">dcbSerial.ByteSize = bits;</span><br><span class="line">Status = SetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">return Status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SetPortStopBits(PORT idCom, int bits)</span><br><span class="line">&#123;</span><br><span class="line">DCB dcbSerial = &#123;0&#125;;</span><br><span class="line">BOOL Status;</span><br><span class="line">dcbSerial.DCBlength = sizeof(dcbSerial);</span><br><span class="line">Status = GetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return FALSE;</span><br><span class="line">&#125;</span><br><span class="line">dcbSerial.StopBits = bits;</span><br><span class="line">Status = SetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">return Status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SetPortParity(PORT idCom, int parity)</span><br><span class="line">&#123;</span><br><span class="line">DCB dcbSerial = &#123;0&#125;;</span><br><span class="line">BOOL Status;</span><br><span class="line">dcbSerial.DCBlength = sizeof(dcbSerial);</span><br><span class="line">Status = GetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return FALSE;</span><br><span class="line">&#125;</span><br><span class="line">dcbSerial.Parity = parity;</span><br><span class="line">Status = SetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">return Status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int GetPortBoudrate(PORT idCom)</span><br><span class="line">&#123;</span><br><span class="line">DCB dcbSerial = &#123;0&#125;;</span><br><span class="line">BOOL Status;</span><br><span class="line">dcbSerial.DCBlength = sizeof(dcbSerial);</span><br><span class="line">Status = GetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">return dcbSerial.BaudRate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int GetPortDataBits(PORT idCom)</span><br><span class="line">&#123;</span><br><span class="line">DCB dcbSerial = &#123;0&#125;;</span><br><span class="line">BOOL Status;</span><br><span class="line">dcbSerial.DCBlength = sizeof(dcbSerial);</span><br><span class="line">Status = GetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">return dcbSerial.ByteSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int GetPortStopBits(PORT idCom)</span><br><span class="line">&#123;</span><br><span class="line">DCB dcbSerial = &#123;0&#125;;</span><br><span class="line">BOOL Status;</span><br><span class="line">dcbSerial.DCBlength = sizeof(dcbSerial);</span><br><span class="line">Status = GetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">return dcbSerial.StopBits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int GetPortParity(PORT idCom)</span><br><span class="line">&#123;</span><br><span class="line">DCB dcbSerial = &#123;0&#125;;</span><br><span class="line">BOOL Status;</span><br><span class="line">dcbSerial.DCBlength = sizeof(dcbSerial);</span><br><span class="line">Status = GetCommState(idCom, &amp;dcbSerial);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">return dcbSerial.Parity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int PortSendDate(PORT idCom, const char *date)</span><br><span class="line">&#123;</span><br><span class="line">DWORD writeLen = strlen(date);</span><br><span class="line">DWORD hasWrite;</span><br><span class="line">BOOL Status = WriteFile(idCom,</span><br><span class="line">date,</span><br><span class="line">writeLen,</span><br><span class="line">&amp;hasWrite,</span><br><span class="line">NULL);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">// SerialDebug(&quot;date Send Success\r\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return hasWrite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int PortReceiveDate(PORT idCom, char *date, int len)</span><br><span class="line">&#123;</span><br><span class="line">DWORD dwEventMask;</span><br><span class="line">DWORD hasRead;</span><br><span class="line"></span><br><span class="line">BOOL Status = WaitCommEvent(idCom, &amp;dwEventMask, NULL);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return FALSE;</span><br><span class="line">&#125;</span><br><span class="line">Status = ReadFile(idCom, date, len, &amp;hasRead, NULL);</span><br><span class="line">date[hasRead] = 0;</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return FALSE;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">// SerialDebug(&quot;has Read %d date\r\n&quot;,hasRead);</span><br><span class="line">&#125;</span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PORT SerialPortInit(int idCom, int rate, int dateBits, int stopBits, int parity)</span><br><span class="line">&#123;</span><br><span class="line">int Status = 0;</span><br><span class="line">PORT Com;</span><br><span class="line">Com = OpenPort(idCom);</span><br><span class="line">if (Com == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">SerialDebug(&quot;Open Com%d Fail\r\n&quot;, idCom);</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">Status = SetPortBoudrate(Com, rate);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">SerialDebug(&quot;Set BoudRate Com%d Fail\r\n&quot;, idCom);</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">Status = SetPortDateBits(Com, dateBits);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">SerialDebug(&quot;Set dateBits Com%d Fail\r\n&quot;, idCom);</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">stopBits = ONESTOPBIT;</span><br><span class="line">Status = SetPortStopBits(Com, stopBits);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">SerialDebug(&quot;Set stopBits Com%d Fail\r\n&quot;, idCom);</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">Status = SetPortParity(Com, parity);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">SerialDebug(&quot;Set Parity Com%d Fail\r\n&quot;, idCom);</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">return Com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SerialReceiveDate(PORT idCom, char *date, int len)</span><br><span class="line">&#123;</span><br><span class="line">DWORD dwEventMask;</span><br><span class="line">DWORD NoByteRead = 0;</span><br><span class="line"></span><br><span class="line">BOOL Status = WaitCommEvent(idCom, &amp;dwEventMask, NULL);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">Status = ReadFile(idCom, date, len, &amp;NoByteRead, NULL);</span><br><span class="line">date[NoByteRead] = 0;</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">SerialDebug(&quot;receive :%s\r\n&quot;, date);</span><br><span class="line">&#125;</span><br><span class="line">return NoByteRead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SerialSendDate(PORT idCom, const char *date, int len)</span><br><span class="line">&#123;</span><br><span class="line">DWORD hasWrite;</span><br><span class="line">BOOL Status = WriteFile(idCom,</span><br><span class="line">date,</span><br><span class="line">len,</span><br><span class="line">&amp;hasWrite,</span><br><span class="line">NULL);</span><br><span class="line">if (Status == FALSE)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">SerialDebug(&quot;Send :%s\r\n&quot;, date);</span><br><span class="line">&#125;</span><br><span class="line">return hasWrite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在windows下面实现C串口&quot;&gt;&lt;a href=&quot;#在windows下面实现C串口&quot; class=&quot;headerlink&quot; title=&quot;在windows下面实现C串口&quot;&gt;&lt;/a&gt;在windows下面实现C串口&lt;/h2&gt;&lt;p&gt;代码示例如下&lt;/p&gt;
&lt;p&gt;Seri</summary>
      
    
    
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Qt显示窗口部件之浏览器</title>
    <link href="http://example.com/2023/09/14/Qt%E6%98%BE%E7%A4%BA%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>http://example.com/2023/09/14/Qt%E6%98%BE%E7%A4%BA%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2023-09-14T08:03:01.000Z</published>
    <updated>2023-09-14T09:26:20.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt显示窗口部件"><a href="#Qt显示窗口部件" class="headerlink" title="Qt显示窗口部件"></a>Qt显示窗口部件</h2><h3 id="QTextBrowser"><a href="#QTextBrowser" class="headerlink" title="QTextBrowser"></a>QTextBrowser</h3><p>QTextBrowser 继承 QTextEdit， QTextBrowser 类提供了一个具有超文本导航的文本浏览器。该类扩展了 QTextEdit(在只读模式下)，添加了一些导航功能，以便用户可以跟踪超文本文档中的链接。  </p><h4 id="QTextBrowser使用示例"><a href="#QTextBrowser使用示例" class="headerlink" title="QTextBrowser使用示例"></a>QTextBrowser使用示例</h4><ul><li>新建一个带ui的工程</li><li>声明和实例化QTextBrowser</li><li>信号和槽的连接</li><li>槽函数的实现</li></ul><h5 id="示例代码如下"><a href="#示例代码如下" class="headerlink" title="示例代码如下"></a>示例代码如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &quot;ui_mainwindow.h&quot;</span><br><span class="line">/*窗口对话框与文本流*/</span><br><span class="line">#include &lt;QFileDialog&gt;</span><br><span class="line">#include &lt;QTextStream&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">    , ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    /*将窗口标题设置为文本浏览器*/</span><br><span class="line">    this-&gt;setWindowTitle(&quot;文本浏览器&quot;);</span><br><span class="line">    /*实例化*/</span><br><span class="line">    textBroser = new QTextBrowser(this);</span><br><span class="line">    /*设置文本浏览器窗口居中*/</span><br><span class="line">    this-&gt;setCentralWidget(textBroser);</span><br><span class="line"></span><br><span class="line">    openAction = new QAction(&quot;打开&quot;,this);</span><br><span class="line">    /* ui 窗口自带有 menubar(菜单栏)、 mainToolbar（工具栏）与</span><br><span class="line">    * statusbar（状态栏）</span><br><span class="line">    * menuBar 是 ui 生成工程就有的，所以可以在 menubar 里添加</span><br><span class="line">    * 我们的 QActiont 等，如果不需要 menubar，可以在 ui 设计</span><br><span class="line">    * 窗口里，在右则对象里把 menubar 删除，再自己重新定义自己的</span><br><span class="line">    * 菜单栏</span><br><span class="line">    */</span><br><span class="line">    ui-&gt;menubar-&gt;addAction(openAction);</span><br><span class="line">    connect(openAction,SIGNAL(triggered()),this,SLOT(openActionTriggered()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::openActionTriggered()&#123;</span><br><span class="line">    /*调用系统打开文件窗口，过滤文件名*/</span><br><span class="line">    QString FileName = QFileDialog::getOpenFileName(this,tr(&quot;打开文件&quot;),&quot;&quot;,</span><br><span class="line">                                                  tr(&quot;Files(*.txt *.cpp *.h *.html)&quot;));</span><br><span class="line">    QFile myFile(FileName);</span><br><span class="line">    /*以只读文本方式打开*/</span><br><span class="line">    if(!myFile.open(QIODevice::ReadOnly | QIODevice::Text))&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    /*使用QTextStream对象接收*/</span><br><span class="line">    QTextStream in (&amp;myFile);</span><br><span class="line">    /*读取全部数据*/</span><br><span class="line">    QString myText = in.readAll();</span><br><span class="line"></span><br><span class="line">    /*判断打开文件的后缀，如果使html格式的则设置文本浏览器为html格式*/</span><br><span class="line">    if(FileName.endsWith(&quot;html&quot;) || FileName.endsWith(&quot;htm&quot;))&#123;</span><br><span class="line">        textBroser-&gt;setHtml(myText);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        textBroser-&gt;setPlainText(myText);</span><br><span class="line">    &#125;</span><br><span class="line">    /*Ui 窗口自带有statusbar(状态栏),设置打开的文件名*/</span><br><span class="line">    ui-&gt;statusbar-&gt;showMessage(&quot;文件名:&quot; + FileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt显示窗口部件&quot;&gt;&lt;a href=&quot;#Qt显示窗口部件&quot; class=&quot;headerlink&quot; title=&quot;Qt显示窗口部件&quot;&gt;&lt;/a&gt;Qt显示窗口部件&lt;/h2&gt;&lt;h3 id=&quot;QTextBrowser&quot;&gt;&lt;a href=&quot;#QTextBrowser&quot; cla</summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt显示窗口部件</title>
    <link href="http://example.com/2023/09/14/Qt%E6%98%BE%E7%A4%BA%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/"/>
    <id>http://example.com/2023/09/14/Qt%E6%98%BE%E7%A4%BA%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/</id>
    <published>2023-09-14T05:30:35.000Z</published>
    <updated>2023-09-14T07:05:03.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt窗口显示部件"><a href="#Qt窗口显示部件" class="headerlink" title="Qt窗口显示部件"></a>Qt窗口显示部件</h2><h3 id="QLabel"><a href="#QLabel" class="headerlink" title="QLabel"></a>QLabel</h3><p>QLabel 提供了一种用于文本或图像显示的小部件  </p><h5 id="代码示例如下"><a href="#代码示例如下" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    /*使用资源里的文件格式使: + 前缀 + 文件路径*/</span><br><span class="line">    QPixmap pixmap(&quot;:image/idesign-logo.png&quot;);</span><br><span class="line">    LabelImage = new QLabel(this);</span><br><span class="line"></span><br><span class="line">    /*标签大小设置为图像大小*/</span><br><span class="line">    LabelImage-&gt;setGeometry(180,150,72,72);</span><br><span class="line">    /*设置图像*/</span><br><span class="line">    LabelImage-&gt;setPixmap(pixmap);</span><br><span class="line">    /*开启允许缩放填充*/</span><br><span class="line">    LabelImage-&gt;setScaledContents(true);</span><br><span class="line"></span><br><span class="line">    LabelString = new QLabel(this);</span><br><span class="line">    LabelString-&gt;setText(&quot;标签演示文本&quot;);</span><br><span class="line">    LabelString-&gt;setGeometry(300,300,120,20);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QCalendarWidget"><a href="#QCalendarWidget" class="headerlink" title="QCalendarWidget"></a>QCalendarWidget</h3><p>QCalendarWidget 类提供了一个基于月的日历小部件，允许用户选择日期。  </p><h5 id="代码示例如下-1"><a href="#代码示例如下-1" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    CalendarWidget = new QCalendarWidget(this);</span><br><span class="line">    CalendarWidget-&gt;setGeometry(200,20,400,300);</span><br><span class="line"></span><br><span class="line">    QFont font;</span><br><span class="line">    /*设置日历里字体的大小为10像素*/</span><br><span class="line">    font.setPixelSize(10);</span><br><span class="line">    CalendarWidget-&gt;setFont(font);</span><br><span class="line"></span><br><span class="line">    PushButton = new QPushButton(this);</span><br><span class="line">    PushButton-&gt;setGeometry(200,350,120,30);</span><br><span class="line">    PushButton-&gt;setText(&quot;回到当前日期&quot;);</span><br><span class="line"></span><br><span class="line">    Label = new QLabel(this);</span><br><span class="line">    Label-&gt;setGeometry(400,350,400,30);</span><br><span class="line">    QString str = &quot;当前选择的日期:&quot; + CalendarWidget-&gt;selectedDate().toString();</span><br><span class="line">    Label-&gt;setText(str);</span><br><span class="line"></span><br><span class="line">    connect(CalendarWidget,SIGNAL(selectionChanged()),this,SLOT(calendarWidgetSelectChanged()));</span><br><span class="line">    connect(PushButton,SIGNAL(clicked()),this,SLOT(pushButtonClicked()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::calendarWidgetSelectChanged()&#123;</span><br><span class="line">    QString str = &quot;当前选择的日期:&quot; + CalendarWidget-&gt;selectedDate().toString();</span><br><span class="line">    Label-&gt;setText(str);</span><br><span class="line">&#125;</span><br><span class="line">void MainWindow::pushButtonClicked()&#123;</span><br><span class="line">    /*设置当前选定的日期为系统的QDate*/</span><br><span class="line">    CalendarWidget-&gt;setSelectedDate(QDate::currentDate());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QLCDNumber"><a href="#QLCDNumber" class="headerlink" title="QLCDNumber"></a>QLCDNumber</h3><p>QLCDNumber 小部件显示一个类似于 lcd 的数字。QLCDNumber 小部件可以显示任意大小的数字。它可以显示十进制、十六进制、八进制或二进制数字。使用 display()插槽很容易连接到数据源，该插槽被重载以接受五种参数类型中的任何一种。  </p><h5 id="代码示例如下-2"><a href="#代码示例如下-2" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    lcdNumber = new QLCDNumber(this);</span><br><span class="line">    lcdNumber-&gt;setGeometry(300,200,200,50);</span><br><span class="line">    /*设置显示的位数为8位*/</span><br><span class="line">    lcdNumber-&gt;setDigitCount(8);</span><br><span class="line">    /*设置样式*/</span><br><span class="line">    lcdNumber-&gt;setSegmentStyle(QLCDNumber::Flat);</span><br><span class="line">    /*设置LCD显示为当前系统时间*/</span><br><span class="line">    QTime time = QTime::currentTime();</span><br><span class="line">    lcdNumber-&gt;display(time.toString(&quot;hh:mm:ss&quot;));</span><br><span class="line">    timer = new QTimer(this);</span><br><span class="line">    /*设置定时器1000毫秒发送一个timeout信号*/</span><br><span class="line">    timer-&gt;start(1000);</span><br><span class="line">    connect(timer,SIGNAL(timeout()),this,SLOT(TimerTimeOut()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::TimerTimeOut()&#123;</span><br><span class="line">    QTime time = QTime::currentTime();</span><br><span class="line">    lcdNumber-&gt;display(time.toString(&quot;hh:mm:ss&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QProgressBar"><a href="#QProgressBar" class="headerlink" title="QProgressBar"></a>QProgressBar</h3><p>QProgressBar 继承 QWidget。 QProgressBar 小部件提供了一个水平或垂直的进度条。进度条用于向用户显示操作的进度，并向他们确认应用程序仍在运行。  QProgressBar 一般用于表示进度，常用于如复制进度，<br>打开、加载进度等。  </p><h5 id="示例代码如下"><a href="#示例代码如下" class="headerlink" title="示例代码如下"></a>示例代码如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">/*实现手机电池充电进度条*/</span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    progressBar = new QProgressBar(this);</span><br><span class="line">    progressBar-&gt;setGeometry(300,200,200,60);</span><br><span class="line">    /*样式表设置，常用setStyleSheet来设置样式(实现界面美化的功能)*/</span><br><span class="line">    progressBar-&gt;setStyleSheet(&quot;QProgressBar&#123;border:8px solid #FFFFFF;&quot;</span><br><span class="line">                               &quot;height:30;&quot;</span><br><span class="line">                               &quot;border-image:url(:/images/battery.png);&quot;//背景图片</span><br><span class="line">                               &quot;text-align:center;&quot;//文字居中</span><br><span class="line">                               &quot;color:rgb(255,0,255);&quot;</span><br><span class="line">                               &quot;font:20px;&quot;//字体为20px</span><br><span class="line">                               &quot;border-radius:10px;&#125;&quot;</span><br><span class="line">                               &quot;QProgressBar::chunk&#123;&quot; //斑马线圆角</span><br><span class="line">                               &quot;border-radius:5px;&quot;</span><br><span class="line">                               &quot;border:1px solid black;&quot;//黑边</span><br><span class="line">                               &quot;background-color:skyblue;&quot;</span><br><span class="line">                               &quot;width:10px;&quot;//宽度</span><br><span class="line">                               &quot;margin:1px;&#125;&quot;);//间距</span><br><span class="line">    /*设置progressBar的范围值*/</span><br><span class="line">    progressBar-&gt;setRange(0,100);</span><br><span class="line">    /*初始化value = 0*/</span><br><span class="line">    value = 0;</span><br><span class="line">    /*设置progressBar的当前值*/</span><br><span class="line">    progressBar-&gt;setValue(value);</span><br><span class="line">    /*设置当前文本字符串的显示格式*/</span><br><span class="line">    progressBar-&gt;setFormat(&quot;充电中%p%&quot;);</span><br><span class="line">    /*定时器设置100毫秒发送一个timeout信号*/</span><br><span class="line">    timer = new QTimer(this);</span><br><span class="line">    timer-&gt;start(100);</span><br><span class="line">    connect(timer,SIGNAL(timeout()),this,SLOT(timerTimerOut()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::timerTimerOut()&#123;</span><br><span class="line">    /*定时器超时，value++*/</span><br><span class="line">    value ++;</span><br><span class="line">    progressBar-&gt;setValue(value);</span><br><span class="line">    if(value &gt; 100)&#123;</span><br><span class="line">        value = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QFrame"><a href="#QFrame" class="headerlink" title="QFrame"></a>QFrame</h3><p>QFrame主要用于画窗口部件，和画边框</p><p>定义效果</p><ul><li>NoFrame - QFrame 不画任何东西</li><li>Box - QFrame 在它的内容周围画一个框</li><li>Panel - QFrame 画一个平板使内容看起来凸起或者凹陷</li><li>WinPanel - 像 Panel，但 QFrame 绘制三维效果的方式和 Microsoft Windows 95（及其它）的一样</li><li>ToolBarPanel - QFrame 调用 QStyle::drawToolBarPanel()</li><li>MenuBarPanel - QFrame 调用 QStyle::drawMenuBarPanel()</li><li>HLine - QFrame 绘制一个水平线，但没有框任何东西（作为分隔是有用的）</li><li>VLine - QFrame 绘制一个竖直线，但没有框任何东西（作为分隔是有用的）</li><li>StyledPanel - QFrame 调用 QStyle::drawPanel()</li><li>PopupPanel - QFrame 调用 QStyle::drawPopupPanel()</li></ul><p>阴影风格有</p><ul><li>Plain 使用调色板的前景颜色绘制（没有任何三维效果）。</li><li>Raised 使用当前颜色组的亮和暗颜色绘制三维的凸起线。</li><li>Sunken 使用当前颜色组的亮和暗颜色绘制三维的凹陷线。</li></ul><h5 id="示例代码如下-1"><a href="#示例代码如下-1" class="headerlink" title="示例代码如下"></a>示例代码如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">/*实现画两个矩形框*/</span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    hFrame = new QFrame(this);</span><br><span class="line">    /*设置起始点，设置长和宽，绘制矩形*/</span><br><span class="line">    hFrame-&gt;setGeometry(QRect(200,100,400,40));</span><br><span class="line">    /*设置框样式为Hline，水平，可设置其他样式如Box*/</span><br><span class="line">    hFrame-&gt;setFrameShape(QFrame::Box);</span><br><span class="line">    /*绘制阴影*/</span><br><span class="line">    hFrame-&gt;setFrameShadow(QFrame::Sunken);</span><br><span class="line"></span><br><span class="line">    vFrame = new QFrame(this);</span><br><span class="line">    /*设置起始点，设置长和宽，绘制矩形*/</span><br><span class="line">    vFrame-&gt;setGeometry(QRect(300,100,20,200));</span><br><span class="line">    /*设置框样式为Hline，水平，可设置其他样式如Box*/</span><br><span class="line">    vFrame-&gt;setFrameShape(QFrame::Box);</span><br><span class="line">    /*绘制阴影*/</span><br><span class="line">    vFrame-&gt;setFrameShadow(QFrame::Sunken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt窗口显示部件&quot;&gt;&lt;a href=&quot;#Qt窗口显示部件&quot; class=&quot;headerlink&quot; title=&quot;Qt窗口显示部件&quot;&gt;&lt;/a&gt;Qt窗口显示部件&lt;/h2&gt;&lt;h3 id=&quot;QLabel&quot;&gt;&lt;a href=&quot;#QLabel&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>单片机模块初始化</title>
    <link href="http://example.com/2023/09/13/%E5%8D%95%E7%89%87%E6%9C%BA%E6%A8%A1%E5%9D%97%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://example.com/2023/09/13/%E5%8D%95%E7%89%87%E6%9C%BA%E6%A8%A1%E5%9D%97%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2023-09-13T08:41:16.000Z</published>
    <updated>2023-09-13T09:06:59.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单片机模块初始化"><a href="#单片机模块初始化" class="headerlink" title="单片机模块初始化"></a>单片机模块初始化</h2><p> __ attribute __((section(“section_name”)))</p><p>其作用是将作用的函数或数据放入指定名为”section_name”对应的中。</p><p>通过使用 __ attribute __ ((section(“section_name”))) 来实现单片机可以在模块内初始化代码，使模块代码更加的内聚。</p><h3 id="模块初始化"><a href="#模块初始化" class="headerlink" title="模块初始化"></a>模块初始化</h3><h4 id="修改单片机的-sct-分散加载文件。"><a href="#修改单片机的-sct-分散加载文件。" class="headerlink" title="修改单片机的.sct 分散加载文件。"></a>修改单片机的.sct 分散加载文件。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">; *************************************************************</span><br><span class="line">; *** Scatter-Loading Description File generated by uVision ***</span><br><span class="line">; *************************************************************</span><br><span class="line"></span><br><span class="line">LR_IROM1 0x08000000 0x00100000  &#123;    ; load region size_region</span><br><span class="line">  ER_IROM1 0x08000000 0x00100000  &#123;  ; load address = execution address</span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   *(InRoot$$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">   .ANY (+XO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 0x20000000 0x00060000  &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">  INIT +0 &#123;</span><br><span class="line">.ANY (init)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义module-init"><a href="#定义module-init" class="headerlink" title="定义module_init"></a>定义module_init</h4><p>使用__ attribute __((section(“section_name”)))，将初始化函数放入指定段中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#define _section(x) __attribute__ ((used,section(x)))</span><br><span class="line"></span><br><span class="line">#define module_init(_func,_name)    \</span><br><span class="line">        app_init_func_t _##_func _section(&quot;init&quot;) = &#123;\</span><br><span class="line">            _func,\</span><br><span class="line">            _name,\</span><br><span class="line">        &#125;</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    void (*app_func_init)(void);</span><br><span class="line">    char *app_name;</span><br><span class="line">&#125;app_init_func_t;</span><br></pre></td></tr></table></figure><h4 id="获取放入函数段的指定地址"><a href="#获取放入函数段的指定地址" class="headerlink" title="获取放入函数段的指定地址"></a>获取放入函数段的指定地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extern unsigned long Image$$INIT$$Base;</span><br><span class="line">extern unsigned long Image$$INIT$$Limit;</span><br><span class="line"></span><br><span class="line">static app_init_func_t *_app_init_start = (app_init_func_t *)&amp;Image$$INIT$$Base;</span><br><span class="line">static app_init_func_t *_app_init_end = (app_init_func_t *)&amp;Image$$INIT$$Limit;</span><br></pre></td></tr></table></figure><h4 id="初始化运行指定函数段"><a href="#初始化运行指定函数段" class="headerlink" title="初始化运行指定函数段"></a>初始化运行指定函数段</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void _init(void)&#123;</span><br><span class="line">    app_init_func_t *t;</span><br><span class="line">    for(t = _app_init_start;t &lt; _app_init_end;t ++)&#123;</span><br><span class="line">        if(t-&gt;app_func_init)&#123;</span><br><span class="line">            t-&gt;app_func_init();</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将_init()函数放入主函数中就可以在模块中初始化函数了，而不需要在外部调用初始化函数。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void Function_init(void)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(Function_init,&quot;Function init&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单片机模块初始化&quot;&gt;&lt;a href=&quot;#单片机模块初始化&quot; class=&quot;headerlink&quot; title=&quot;单片机模块初始化&quot;&gt;&lt;/a&gt;单片机模块初始化&lt;/h2&gt;&lt;p&gt; __ attribute __((section(“section_name”)))&lt;/p</summary>
      
    
    
    
    
    <category term="单片机" scheme="http://example.com/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Qt信号和槽</title>
    <link href="http://example.com/2023/09/12/Qt%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/"/>
    <id>http://example.com/2023/09/12/Qt%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</id>
    <published>2023-09-12T09:27:00.000Z</published>
    <updated>2023-09-13T01:49:59.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt信号与槽"><a href="#Qt信号与槽" class="headerlink" title="Qt信号与槽"></a>Qt信号与槽</h2><h4 id="QT信号与槽机制"><a href="#QT信号与槽机制" class="headerlink" title="QT信号与槽机制"></a>QT信号与槽机制</h4><p>信号（signal）：在特定情况下被发送的事件</p><p>槽（slot）：对信号响应的函数，槽函数可以与一个信号关联，当信号被发送时，槽函数自动执行。</p><p>信号与槽关联使用QObject::connect()函数实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">example：</span><br><span class="line">QObject::connect(sender,SIGNAL(signal()),receiver,SLOT(slot()));</span><br><span class="line">connect(sender,SIGNAL(signal()),receiver,SLOT(slot()));</span><br><span class="line">上面两种写法都可以，因为QObject是QT的基类，在调用是可以忽略前面的限定符。</span><br><span class="line">sender:发送信号的对象</span><br><span class="line">receiver:接受信号的对象</span><br><span class="line">SIGNAL和SLOT是QT的宏，用于指明信号和槽，并将参数转化成相应字符串。</span><br><span class="line">signal:需要发送的信号</span><br><span class="line">slot:接收信号的槽</span><br></pre></td></tr></table></figure><h5 id="信号的创建"><a href="#信号的创建" class="headerlink" title="信号的创建"></a>信号的创建</h5><ul><li>在mainwindow.h里面引入 <QPushButton></QPushButton></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QPushButton&gt;</span><br></pre></td></tr></table></figure><ul><li>声明一个信号</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">signals:</span><br><span class="line">    void pushButtonTextChanged();</span><br></pre></td></tr></table></figure><h5 id="槽的创建"><a href="#槽的创建" class="headerlink" title="槽的创建"></a>槽的创建</h5><ul><li>直接在mainwindow.h里面声明槽。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public slots:</span><br><span class="line">    void changeButtonText();</span><br><span class="line">    void pushButtonClicked();</span><br></pre></td></tr></table></figure><ul><li>并且在mainwindow.cpp里面实现槽的定义。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void MainWindow::pushButtonClicked()&#123;</span><br><span class="line">    /*use emit send signal*/</span><br><span class="line">    emit pushButtonTextChanged();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::changeButtonText()&#123;</span><br><span class="line">    pushButton-&gt;setText(&quot;按钮被按下&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>槽可以是任何成员函数，不同全局函数，静态函数。</li><li>槽函数和信号的参数和返回值要一样。</li></ul><h5 id="信号和槽的连接"><a href="#信号和槽的连接" class="headerlink" title="信号和槽的连接"></a>信号和槽的连接</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connect(pushButton,SIGNAL(clicked()),this,SLOT(pushButtonClicked()));</span><br><span class="line">connect(this,SIGNAL(pushButtonTextChanged()),this,SLOT(changeButtonText()));</span><br></pre></td></tr></table></figure><h5 id="mainwindow如下："><a href="#mainwindow如下：" class="headerlink" title="mainwindow如下："></a>mainwindow如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    /*set windows width hight 480 * 800*/</span><br><span class="line">    this-&gt;resize(800,480);</span><br><span class="line">    /*create QPushBotton Class*/</span><br><span class="line">    pushButton = new QPushButton(this);</span><br><span class="line">    /*use setText() set text infomation*/</span><br><span class="line">    pushButton-&gt;setText(&quot;按钮&quot;);</span><br><span class="line"></span><br><span class="line">    /*signal slot connect signal*/</span><br><span class="line">    connect(pushButton,SIGNAL(clicked()),this,SLOT(pushButtonClicked()));</span><br><span class="line">    connect(this,SIGNAL(pushButtonTextChanged()),this,SLOT(changeButtonText()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::pushButtonClicked()&#123;</span><br><span class="line">    /*use emit send signal*/</span><br><span class="line">    emit pushButtonTextChanged();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::changeButtonText()&#123;</span><br><span class="line">    pushButton-&gt;setText(&quot;按钮被按下&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt信号与槽&quot;&gt;&lt;a href=&quot;#Qt信号与槽&quot; class=&quot;headerlink&quot; title=&quot;Qt信号与槽&quot;&gt;&lt;/a&gt;Qt信号与槽&lt;/h2&gt;&lt;h4 id=&quot;QT信号与槽机制&quot;&gt;&lt;a href=&quot;#QT信号与槽机制&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt输入窗口部件</title>
    <link href="http://example.com/2023/09/12/Qt%E8%BE%93%E5%85%A5%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/"/>
    <id>http://example.com/2023/09/12/Qt%E8%BE%93%E5%85%A5%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/</id>
    <published>2023-09-12T09:26:46.000Z</published>
    <updated>2023-09-13T08:31:59.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt窗口输入部件"><a href="#Qt窗口输入部件" class="headerlink" title="Qt窗口输入部件"></a>Qt窗口输入部件</h2><h3 id="1、QComboBox"><a href="#1、QComboBox" class="headerlink" title="1、QComboBox"></a>1、QComboBox</h3><p>QComboBox提供下拉组合框的组件。</p><h3 id="QComboBox使用示例"><a href="#QComboBox使用示例" class="headerlink" title="QComboBox使用示例"></a>QComboBox使用示例</h3><ul><li>声明<QComboBox></QComboBox></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private:</span><br><span class="line">    QComboBox *ComboBox;</span><br></pre></td></tr></table></figure><ul><li>实例化 QComboBox组件，和初始化QComboBox组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ComboBox = new QComboBox(this);</span><br><span class="line">ComboBox-&gt;setGeometry(300,200,150,30);</span><br><span class="line">ComboBox-&gt;addItem(&quot;四川(default)&quot;);</span><br><span class="line">ComboBox-&gt;addItem(&quot;云南&quot;);</span><br><span class="line">ComboBox-&gt;addItem(&quot;贵州&quot;);</span><br></pre></td></tr></table></figure><ul><li>实现信号和槽的连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(ComboBox,SIGNAL(currentIndexChanged(int)),this,SLOT(ComboBoxIndexChanged(int)));</span><br></pre></td></tr></table></figure><ul><li>实现QComboBox的槽函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void MainWindow::ComboBoxIndexChanged(int index)&#123;</span><br><span class="line">    qDebug()&lt;&lt;&quot;您选择的省份是&quot;&lt;&lt;ComboBox-&gt;itemText(index)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="示例代码如下"><a href="#示例代码如下" class="headerlink" title="示例代码如下"></a>示例代码如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    ComboBox = new QComboBox(this);</span><br><span class="line">    ComboBox-&gt;setGeometry(300,200,150,30);</span><br><span class="line">    ComboBox-&gt;addItem(&quot;四川(default)&quot;);</span><br><span class="line">    ComboBox-&gt;addItem(&quot;云南&quot;);</span><br><span class="line">    ComboBox-&gt;addItem(&quot;贵州&quot;);</span><br><span class="line">    connect(ComboBox,SIGNAL(currentIndexChanged(int)),this,SLOT(ComboBoxIndexChanged(int)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::ComboBoxIndexChanged(int index)&#123;</span><br><span class="line">    qDebug()&lt;&lt;&quot;您选择的省份是&quot;&lt;&lt;ComboBox-&gt;itemText(index)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、QFontComboBox"><a href="#2、QFontComboBox" class="headerlink" title="2、QFontComboBox"></a>2、QFontComboBox</h3><p>QFontComboBox 类提供了下拉选择字体系列的组合框小部件。  </p><h3 id="QFontComboBox使用示例"><a href="#QFontComboBox使用示例" class="headerlink" title="QFontComboBox使用示例"></a>QFontComboBox使用示例</h3><ul><li><p>引入<QFontComboBox></QFontComboBox></p></li><li><p>声明QFontComboBox对象</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private:</span><br><span class="line">    QFontComboBox *FontConboBox;</span><br></pre></td></tr></table></figure><ul><li>实例化对象QFontComboBox</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FontConboBox = new QFontComboBox(this);</span><br><span class="line">    Label = new QLabel(this);</span><br><span class="line"></span><br><span class="line">    FontConboBox-&gt;setGeometry(280,200,200,30);</span><br><span class="line">    Label-&gt;setGeometry(280,250,300,50);</span><br></pre></td></tr></table></figure><ul><li>实现槽函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*将lable里面的文本内容设置为所选择的字体*/</span><br><span class="line">    Label-&gt;setFont(Font);</span><br><span class="line">    /*定义一个字符串接收当前项的字体*/</span><br><span class="line">    QString str = &quot;用此标签显示字体效果\n设置的字体为:&quot; +</span><br><span class="line">            FontConboBox-&gt;itemText(FontConboBox-&gt;currentIndex());</span><br><span class="line">    /*将字符串的内容作为lable的显示内容*/</span><br><span class="line">    Label-&gt;setText(str);</span><br></pre></td></tr></table></figure><ul><li>连接信号和槽</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(FontConboBox,SIGNAL(currentFontChanged(QFont)),this,SLOT(FontComboBoxFontChanged(QFont)));</span><br></pre></td></tr></table></figure><h5 id="代码示例如下"><a href="#代码示例如下" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    FontConboBox = new QFontComboBox(this);</span><br><span class="line">    Label = new QLabel(this);</span><br><span class="line"></span><br><span class="line">    FontConboBox-&gt;setGeometry(280,200,200,30);</span><br><span class="line">    Label-&gt;setGeometry(280,250,300,50);</span><br><span class="line"></span><br><span class="line">    connect(FontConboBox,SIGNAL(currentFontChanged(QFont)),this,SLOT(FontComboBoxFontChanged(QFont)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::FontComboBoxFontChanged(QFont Font)&#123;</span><br><span class="line">    /*将lable里面的文本内容设置为所选择的字体*/</span><br><span class="line">    Label-&gt;setFont(Font);</span><br><span class="line">    /*定义一个字符串接收当前项的字体*/</span><br><span class="line">    QString str = &quot;用此标签显示字体效果\n设置的字体为:&quot; +</span><br><span class="line">            FontConboBox-&gt;itemText(FontConboBox-&gt;currentIndex());</span><br><span class="line">    /*将字符串的内容作为lable的显示内容*/</span><br><span class="line">    Label-&gt;setText(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、QLineEdit"><a href="#3、QLineEdit" class="headerlink" title="3、QLineEdit"></a>3、QLineEdit</h3><p>QLineEdit 小部件是一个单行文本编辑器。  </p><h4 id="QLineEdit的使用示例"><a href="#QLineEdit的使用示例" class="headerlink" title="QLineEdit的使用示例"></a>QLineEdit的使用示例</h4><ul><li>引入<QLineEdit></QLineEdit></li><li>声明和实例化QLineEdit</li><li>实现和连接槽函数</li></ul><h5 id="示例代码如下-1"><a href="#示例代码如下-1" class="headerlink" title="示例代码如下"></a>示例代码如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    LineEdit = new QLineEdit(this);</span><br><span class="line">    LineEdit-&gt;setGeometry(280,200,200,20);</span><br><span class="line">    PushButton = new QPushButton(this);</span><br><span class="line">    PushButton-&gt;setGeometry(500,200,50,20);</span><br><span class="line">    PushButton-&gt;setText(&quot;确认&quot;);</span><br><span class="line">    Label = new QLabel(this);</span><br><span class="line">    Label-&gt;setGeometry(280,250,400,20);</span><br><span class="line">    Label-&gt;setText(&quot;您输入的内容是:&quot;);</span><br><span class="line"></span><br><span class="line">    connect(PushButton,SIGNAL(clicked()),this,SLOT(PushButtonClicked()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::PushButtonClicked()&#123;</span><br><span class="line">    QString str;</span><br><span class="line"></span><br><span class="line">    str = &quot;您输入的内容是: &quot;;</span><br><span class="line">    str += LineEdit-&gt;text();</span><br><span class="line">    /*设置label文本显示内容*/</span><br><span class="line">    Label-&gt;setText(str);</span><br><span class="line">    /*点击确认键之后清空LineEdit单行输入框*/</span><br><span class="line">    LineEdit-&gt;clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、QTextEdit"><a href="#4、QTextEdit" class="headerlink" title="4、QTextEdit"></a>4、QTextEdit</h3><p>QTextEdit 类提供了一个查看器&#x2F;编辑器小部件。  </p><h4 id="QTextEdit的使用示例"><a href="#QTextEdit的使用示例" class="headerlink" title="QTextEdit的使用示例"></a>QTextEdit的使用示例</h4><ul><li>引入<QTextEdit></QTextEdit></li><li>声明和实例化QTextEdit</li><li>实现槽函数和信号和槽的连接</li></ul><h5 id="代码示例如下-1"><a href="#代码示例如下-1" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    textEdit = new QTextEdit(this);</span><br><span class="line">    textEdit-&gt;setGeometry(0,0,800,400);</span><br><span class="line"></span><br><span class="line">    pushButtonSelect = new QPushButton(this);</span><br><span class="line">    pushButtonSelect-&gt;setGeometry(200,420,50,30);</span><br><span class="line">    pushButtonSelect-&gt;setText(&quot;全选&quot;);</span><br><span class="line"></span><br><span class="line">    pushButtonClear = new QPushButton(this);</span><br><span class="line">    pushButtonClear-&gt;setGeometry(500,420,50,30);</span><br><span class="line">    pushButtonClear-&gt;setText(&quot;清除&quot;);</span><br><span class="line"></span><br><span class="line">    connect(pushButtonSelect,SIGNAL(clicked()),this,SLOT(pushButtonSelectAllClicked()));</span><br><span class="line">    connect(pushButtonClear,SIGNAL(clicked()),this,SLOT(pushButtonClearAllClicked()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::pushButtonSelectAllClicked()&#123;</span><br><span class="line">    /*设置焦点为textEdit*/</span><br><span class="line">    textEdit-&gt;setFocus();</span><br><span class="line">    /*判断文本编辑内容是否为空，不为空则全选*/</span><br><span class="line">    if(!textEdit-&gt;toPlainText().isEmpty())&#123;</span><br><span class="line">        textEdit-&gt;selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::pushButtonClearAllClicked()&#123;</span><br><span class="line">    /*清空textEdit里面的内容*/</span><br><span class="line">    textEdit-&gt;clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、QPlainTextEdit"><a href="#5、QPlainTextEdit" class="headerlink" title="5、QPlainTextEdit"></a>5、QPlainTextEdit</h3><p>QPlainTextEdit 类提供了一个用于编辑和显示纯文本的小部件，常用于显示多行文本或简单<br>文本。  </p><h5 id="示例代码如下-2"><a href="#示例代码如下-2" class="headerlink" title="示例代码如下"></a>示例代码如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QDir&gt;</span><br><span class="line">#include &lt;QTextStream&gt;</span><br><span class="line">#include &lt;QCoreApplication&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    /*设置当前程序的工作目录为可执行程序的工作目录*/</span><br><span class="line">    QDir::setCurrent(QCoreApplication::applicationDirPath());</span><br><span class="line"></span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    plainTextEdit = new QPlainTextEdit(this);</span><br><span class="line">    plainTextEdit-&gt;setGeometry(0,50,800,430);</span><br><span class="line"></span><br><span class="line">    radioButton = new QRadioButton(this);</span><br><span class="line">    radioButton-&gt;setGeometry(650,20,100,20);</span><br><span class="line">    radioButton-&gt;setText(&quot;只读模式&quot;);</span><br><span class="line"></span><br><span class="line">    /*打开可执行程序目录里面的moc_mainwindow.cpp.cpp*/</span><br><span class="line">    QFile file(&quot;moc_mainwindow.cpp&quot;);</span><br><span class="line">    /*以只读模式打开，但是可以在plainTextEdit里面编辑*/</span><br><span class="line">    file.open(QFile::ReadOnly | QFile::Text);</span><br><span class="line">    /*加载到文件流*/</span><br><span class="line">    QTextStream in(&amp;file);</span><br><span class="line">    /*从文件流中读取全部*/</span><br><span class="line">    plainTextEdit-&gt;insertPlainText(in.readAll());</span><br><span class="line">    connect(radioButton,SIGNAL(clicked()),this,SLOT(radioButtonClicked()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::radioButtonClicked()&#123;</span><br><span class="line">    if(radioButton-&gt;isChecked())&#123;</span><br><span class="line">        /*设置为只读模式*/</span><br><span class="line">        plainTextEdit-&gt;setReadOnly(true);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        plainTextEdit-&gt;setReadOnly(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、QSpinBox"><a href="#6、QSpinBox" class="headerlink" title="6、QSpinBox"></a>6、QSpinBox</h3><p>QSpinBox 类提供了一个微调框小部件  </p><h5 id="示例代码如下-3"><a href="#示例代码如下-3" class="headerlink" title="示例代码如下"></a>示例代码如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    this-&gt;setStyleSheet(&quot;QMainWindow &#123;background-color: rgba(100,100,100,100%)&#125;&quot;);</span><br><span class="line"></span><br><span class="line">    SpinBox = new QSpinBox(this);</span><br><span class="line">    SpinBox-&gt;setGeometry(350,200,150,30);</span><br><span class="line"></span><br><span class="line">    /*设置范围0~100*/</span><br><span class="line">    SpinBox-&gt;setRange(0,100);</span><br><span class="line">    /*设置步长值为10*/</span><br><span class="line">    SpinBox-&gt;setSingleStep(10);</span><br><span class="line">    /*设置初始值为100*/</span><br><span class="line">    SpinBox-&gt;setValue(100);</span><br><span class="line">    /*设置后缀*/</span><br><span class="line">    SpinBox-&gt;setSuffix(&quot;%不透明度&quot;);</span><br><span class="line">    connect(SpinBox,SIGNAL(valueChanged(int)),this,SLOT(spinBoxValueChanged(int)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::spinBoxValueChanged(int value)&#123;</span><br><span class="line">    /*转换为double 数据类型*/</span><br><span class="line">    double dvalue = (double)value / 100;</span><br><span class="line">    this-&gt;setWindowOpacity(dvalue);</span><br><span class="line">    qDebug()&lt;&lt; &quot;value is: &quot;&lt;&lt;value&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、QDoubleSpinBox"><a href="#7、QDoubleSpinBox" class="headerlink" title="7、QDoubleSpinBox"></a>7、QDoubleSpinBox</h3><p>QDoubleSpinBox 类提供了一个用于处理浮点值微调框小部件。与 QSpinBox 作用基本一样，<br>与 QSpinBox 不同的是， QDoubleSpinBox 类处理的是浮点值数据。  </p><h5 id="示例代码如下-4"><a href="#示例代码如下-4" class="headerlink" title="示例代码如下"></a>示例代码如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    /*实例化和设置显示的位置大小*/</span><br><span class="line">    DoubleSpinBox = new QDoubleSpinBox(this);</span><br><span class="line">    DoubleSpinBox-&gt;setGeometry((this-&gt;width() - 200)/2,(this-&gt;height() - 30) / 2,200,30);</span><br><span class="line">    /*设置前缀*/</span><br><span class="line">    DoubleSpinBox-&gt;setPrefix(&quot;窗口大小&quot;);</span><br><span class="line">    /*设置后缀*/</span><br><span class="line">    DoubleSpinBox-&gt;setSuffix(&quot;%&quot;);</span><br><span class="line">    /*设置范围*/</span><br><span class="line">    DoubleSpinBox-&gt;setRange(50.00,100.00);</span><br><span class="line">    /*设置初始值*/</span><br><span class="line">    DoubleSpinBox-&gt;setValue(100.00);</span><br><span class="line">    /*设置步长*/</span><br><span class="line">    DoubleSpinBox-&gt;setSingleStep(0.1);</span><br><span class="line"></span><br><span class="line">    connect(DoubleSpinBox,SIGNAL(valueChanged(double)),this,SLOT(DoubleSpinBoxValueChanged(double)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::DoubleSpinBoxValueChanged(double value)&#123;</span><br><span class="line">    int width = 800 * value / 100;</span><br><span class="line">    int height = 480 *value / 100;</span><br><span class="line"></span><br><span class="line">    this-&gt;setGeometry(0,0,width,height);</span><br><span class="line">    DoubleSpinBox-&gt;setGeometry((this-&gt;width() - 200)/2,</span><br><span class="line">                               (this-&gt;height() - 30) / 2,200,30);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、QTimeEdit-QTimeDateEdit-QDateEdit"><a href="#8、QTimeEdit-QTimeDateEdit-QDateEdit" class="headerlink" title="8、QTimeEdit QTimeDateEdit QDateEdit"></a>8、QTimeEdit QTimeDateEdit QDateEdit</h3><p>QTimeEdit 类提供一个基于 QDateTimeEdit 类编辑时间的小部件。  </p><p>QDateEdit 类提供一个基于 QDateTimeEdit 类编辑时间的小部件。  </p><p>QDateTimeEdit 类提供了一个用于编辑日期和时间的小部件。 QDateTimeEdit<br>允许用户使用键盘或箭头键编辑日期，以增加或减少日期和时间值。  </p><h5 id="代码示例如下-2"><a href="#代码示例如下-2" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    /*实例化对象，传入当前日期和时间*/</span><br><span class="line">    dateTimeEdit = new QDateTimeEdit(QDateTime::currentDateTime(),this);</span><br><span class="line">    dateTimeEdit-&gt;setGeometry(300,200,200,30);</span><br><span class="line"></span><br><span class="line">    /*设置弹出日期控件与否*/</span><br><span class="line">    dateTimeEdit-&gt;setCalendarPopup(true);</span><br><span class="line">    /*实例化对象，传入当前时间*/</span><br><span class="line">    timeEdit = new QTimeEdit(QTime::currentTime(),this);</span><br><span class="line">    timeEdit-&gt;setGeometry(300,240,200,30);</span><br><span class="line">    /*实例化对象传入当前日期*/</span><br><span class="line">    dateEdit = new QDateEdit(QDate::currentDate(),this);</span><br><span class="line">    dateEdit-&gt;setGeometry(300,280,200,30);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、QDial"><a href="#9、QDial" class="headerlink" title="9、QDial"></a>9、QDial</h3><p>QDial 类提供了一个圆形范围控制(如速度计或电位器)。 QDial 用于当用户需要在可编程定义的范围内控制一个值，并且该范围要么是环绕的(例如，从 0 到 359 度测量的角度)，要么对话框布局需要一个正方形小部件。  当 wrapping（）为 false（默认设置）时，滑块和刻度盘之间没有真正的区别。  </p><h5 id="代码示例如下-3"><a href="#代码示例如下-3" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    dial = new QDial(this);</span><br><span class="line">    dial-&gt;setGeometry(300,100,200,200);</span><br><span class="line"></span><br><span class="line">    /*设置页长(两个最大刻度的间距)*/</span><br><span class="line">    dial-&gt;setPageStep(10);</span><br><span class="line">    /*设置刻度可见*/</span><br><span class="line">    dial-&gt;setNotchesVisible(true);</span><br><span class="line">    /*设置两个凹槽之间的目标像素数*/</span><br><span class="line">    dial-&gt;setNotchTarget(1.00);</span><br><span class="line">    /*设置dial值的范围*/</span><br><span class="line">    dial-&gt;setRange(0,100);</span><br><span class="line">//    /*开启后可以指向圆的任何角度*/</span><br><span class="line">//    dial-&gt;setWrapping(true);</span><br><span class="line"></span><br><span class="line">    label = new QLabel(this);</span><br><span class="line">    label-&gt;setGeometry(370,300,200,50);</span><br><span class="line">    label-&gt;setText(&quot;0km/h&quot;);</span><br><span class="line"></span><br><span class="line">    connect(dial,SIGNAL(valueChanged(int)),this,SLOT(dialValueChanged(int)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::dialValueChanged(int value)&#123;</span><br><span class="line">    /*使用QString::number()转化成字符串*/</span><br><span class="line">    label-&gt;setText(QString::number(value) + &quot;km/h&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10、QScroolBar"><a href="#10、QScroolBar" class="headerlink" title="10、QScroolBar"></a>10、QScroolBar</h3><p>QScrollBar 继承 QAbstractSlider。 QScrollBar 小部件提供垂直或水平滚动条，允许用户访问比用于显示文档的小部件大的文档部分。它提供了用户在文档中的当前位置和可见文档数量的可视化指示。  </p><h5 id="代码示例如下-4"><a href="#代码示例如下-4" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    /*实例化水平滚动条hScrollBar*/</span><br><span class="line">    hScrollBar = new QScrollBar(Qt::Horizontal,this);</span><br><span class="line">    hScrollBar-&gt;setGeometry(0,450,800,30);</span><br><span class="line">    /*实例化竖直滚动条vScrollBar*/</span><br><span class="line">    vScrollBar = new QScrollBar(Qt::Vertical,this);</span><br><span class="line">    vScrollBar-&gt;setGeometry(770,0,30,480);</span><br><span class="line"></span><br><span class="line">    label = new QLabel(this);</span><br><span class="line">    label-&gt;setText(&quot;这是一个测试&quot;);</span><br><span class="line">    label-&gt;setGeometry(300,200,120,30);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11、QSlider"><a href="#11、QSlider" class="headerlink" title="11、QSlider"></a>11、QSlider</h3><p>QSlider 继承 QAbstractSlider。 QScrollBar 类提供垂直或水平滑动条小部件，滑动条是用于控制有界值的典型小部件。它允许用户沿着水平或垂直凹槽移动滑块手柄，并将手柄的位置转换为合法范围内的整数值。  </p><h5 id="代码示例如下-5"><a href="#代码示例如下-5" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    vSlider = new QSlider(Qt::Vertical,this);</span><br><span class="line">    vSlider-&gt;setGeometry(200,50,20,200);</span><br><span class="line">    vSlider-&gt;setRange(0,100);</span><br><span class="line"></span><br><span class="line">    hSlider = new QSlider(Qt::Horizontal,this);</span><br><span class="line">    hSlider-&gt;setGeometry(250,100,200,20);</span><br><span class="line">    hSlider-&gt;setRange(0,100);</span><br><span class="line"></span><br><span class="line">    label = new QLabel(&quot;滑动条值: 0&quot;,this);</span><br><span class="line">    label-&gt;setGeometry(250,200,100,20);</span><br><span class="line"></span><br><span class="line">    connect(vSlider,SIGNAL(valueChanged(int)),this,SLOT(vSliderValueChanged(int)));</span><br><span class="line">    connect(hSlider,SIGNAL(valueChanged(int)),this,SLOT(hSliderValueChanged(int)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::vSliderValueChanged(int value)&#123;</span><br><span class="line">    hSlider-&gt;setSliderPosition(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::hSliderValueChanged(int value)&#123;</span><br><span class="line">    /*当水平滑动条的值改变时，改变垂直滑动条的值*/</span><br><span class="line">    vSlider-&gt;setSliderPosition(value);</span><br><span class="line">    QString str = &quot;滑动条值: &quot; + QString::number(value);</span><br><span class="line">    label-&gt;setText(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12、QKeySequenceEdit"><a href="#12、QKeySequenceEdit" class="headerlink" title="12、QKeySequenceEdit"></a>12、QKeySequenceEdit</h3><p>QKeySequenceEdit 继承 QWidget。这个小部件允许用户选择 QKeySequence, QKeySequence通常用作快捷方式。当小部件接收到焦点并在用户释放最后一个键后一秒结束时，将启动记录，通常用作记录快捷键。  </p><h5 id="代码示例如下-6"><a href="#代码示例如下-6" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    KeySequenceEdit = new QKeySequenceEdit(this);</span><br><span class="line">    KeySequenceEdit-&gt;setGeometry(350,200,150,30);</span><br><span class="line"></span><br><span class="line">    connect(KeySequenceEdit,SIGNAL(keySequenceChanged(const QKeySequence &amp;)),</span><br><span class="line">            this,SLOT(KeySequenceEditChanged(const QKeySequence &amp;)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::KeySequenceEditChanged(const QKeySequence &amp;keySequence)&#123;</span><br><span class="line">    /*判断输入的组合键是否为Ctrl + Q，如果是则退出程序*/</span><br><span class="line">    if(keySequence == QKeySequence(tr(&quot;Ctrl+Q&quot;)))&#123;</span><br><span class="line">        this-&gt;close();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        qDebug()&lt;&lt;keySequence.toString()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt窗口输入部件&quot;&gt;&lt;a href=&quot;#Qt窗口输入部件&quot; class=&quot;headerlink&quot; title=&quot;Qt窗口输入部件&quot;&gt;&lt;/a&gt;Qt窗口输入部件&lt;/h2&gt;&lt;h3 id=&quot;1、QComboBox&quot;&gt;&lt;a href=&quot;#1、QComboBox&quot; class</summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt按钮控件</title>
    <link href="http://example.com/2023/09/12/Qt%E6%8C%89%E9%92%AE%E6%8E%A7%E4%BB%B6/"/>
    <id>http://example.com/2023/09/12/Qt%E6%8C%89%E9%92%AE%E6%8E%A7%E4%BB%B6/</id>
    <published>2023-09-12T09:26:21.000Z</published>
    <updated>2023-09-13T01:49:59.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt按钮控件的使用"><a href="#Qt按钮控件的使用" class="headerlink" title="Qt按钮控件的使用"></a>Qt按钮控件的使用</h2><h2 id="按钮控件（button）"><a href="#按钮控件（button）" class="headerlink" title="按钮控件（button）"></a>按钮控件（button）</h2><ul><li>pushButton （下压按钮）</li><li>ToolButton  （工具按钮）</li><li>RadioButton （选择按钮）</li><li>CheckBox （检查框）</li><li>Command Link Button （命令连接按钮）</li><li>Dialog Button Box （对话框按钮）</li></ul><h3 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h3><ul><li>引入<QpushButton>类。</QpushButton></li><li>定义声明信号与槽，和实例化对象</li><li>连接信号与槽</li></ul><h4 id="代码定义声明如下"><a href="#代码定义声明如下" class="headerlink" title="代码定义声明如下"></a>代码定义声明如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#ifndef MAINWINDOW_H</span><br><span class="line">#define MAINWINDOW_H</span><br><span class="line"></span><br><span class="line">#include &lt;QMainWindow&gt;</span><br><span class="line"></span><br><span class="line">/* import QPushButton Class*/</span><br><span class="line">#include &lt;QPushButton&gt;</span><br><span class="line"></span><br><span class="line">class MainWindow : public QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    MainWindow(QWidget *parent = nullptr);</span><br><span class="line">    ~MainWindow();</span><br><span class="line">    /*statement signal*/</span><br><span class="line">    </span><br><span class="line">signals:</span><br><span class="line">    void pushButtonTextChanged();</span><br><span class="line">    </span><br><span class="line">    /*statement slot*/</span><br><span class="line">public slots:</span><br><span class="line">    void changeButtonText();</span><br><span class="line">    void pushButtonClicked();</span><br><span class="line">private:</span><br><span class="line">    /*statement QPushBotton Class*/</span><br><span class="line">    QPushButton *pushButton;</span><br><span class="line">&#125;;</span><br><span class="line">#endif // MAINWINDOW_H</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    /*set windows width hight 480 * 800*/</span><br><span class="line">    this-&gt;resize(800,480);</span><br><span class="line">    /*create QPushBotton Class*/</span><br><span class="line">    pushButton = new QPushButton(this);</span><br><span class="line">    /*use setText() set text infomation*/</span><br><span class="line">    pushButton-&gt;setText(&quot;按钮&quot;);</span><br><span class="line"></span><br><span class="line">    /*signal slot connect signal*/</span><br><span class="line">    connect(pushButton,SIGNAL(clicked()),this,SLOT(pushButtonClicked()));</span><br><span class="line">    connect(this,SIGNAL(pushButtonTextChanged()),this,SLOT(changeButtonText()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::pushButtonClicked()&#123;</span><br><span class="line">    /*use emit send signal*/</span><br><span class="line">    emit pushButtonTextChanged();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::changeButtonText()&#123;</span><br><span class="line">    pushButton-&gt;setText(&quot;按钮被按下&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QToolButton"><a href="#QToolButton" class="headerlink" title="QToolButton"></a>QToolButton</h3><p>​QtoolButton和QpushButton的区别是QtoolButton可以带图标。</p><h4 id="使用QtoolButton"><a href="#使用QtoolButton" class="headerlink" title="使用QtoolButton"></a>使用QtoolButton</h4><ul><li>引入<QToolButton>和<QToolBar>类</QToolBar></QToolButton></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QToolButton&gt;</span><br><span class="line">#include &lt;QToolBar&gt;</span><br></pre></td></tr></table></figure><ul><li>声明QToolButton和QToolBar对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private:</span><br><span class="line">    QToolBar *toolBar;</span><br><span class="line">    QToolButton *toolButton;</span><br></pre></td></tr></table></figure><ul><li>实例化对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toolBar = new QToolBar(this);</span><br></pre></td></tr></table></figure><h5 id="主程序如下："><a href="#主程序如下：" class="headerlink" title="主程序如下："></a>主程序如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QApplication&gt;</span><br><span class="line">#include &lt;QStyle&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    /*create QToolBar Class*/</span><br><span class="line">    toolBar = new QToolBar(this);</span><br><span class="line">    toolBar-&gt;setGeometry(0,0,800,100);</span><br><span class="line">    /*create style Class,use set icon and Style*/</span><br><span class="line">    QStyle *style = QApplication::style();</span><br><span class="line">    /*use QT&#x27;s icon*/</span><br><span class="line">    QIcon icon = style-&gt;standardIcon(QStyle::SP_TitleBarMenuButton);</span><br><span class="line"></span><br><span class="line">    /*create QToolButton Class*/</span><br><span class="line">    toolButton = new QToolButton();</span><br><span class="line">    /*toolButton set icon and text*/</span><br><span class="line">    toolButton-&gt;setIcon(icon);</span><br><span class="line">    toolButton-&gt;setText(&quot;help&quot;);</span><br><span class="line"></span><br><span class="line">    /*use setToolButtonStyle Function set ToolButton Style,</span><br><span class="line">        set icon is under this button*/</span><br><span class="line">    toolButton-&gt;setToolButtonStyle(Qt::ToolButtonTextUnderIcon);</span><br><span class="line">    /*will button add the toolbar*/</span><br><span class="line">    toolBar-&gt;addWidget(toolButton);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="QRadioButton"><a href="#QRadioButton" class="headerlink" title="QRadioButton"></a>QRadioButton</h3><h4 id="使用QRadioButton"><a href="#使用QRadioButton" class="headerlink" title="使用QRadioButton"></a>使用QRadioButton</h4><ul><li>添加资源文件（添加顺序如下）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要添加的项目-&gt;Add New-&gt;QT-&gt;Qt Resource File-&gt;Choose-&gt;(添加资源文件名称)</span><br><span class="line">双击添加的资源文件.qrc-&gt;Add Prefix-&gt;前缀添加&quot;/&quot;-&gt;Add Files</span><br></pre></td></tr></table></figure><ul><li>添加qss文件</li></ul><p>QSS文件使用Qt程序相关联的样式文件，包括GUI的布局，颜色，鼠标的行为，大小和字体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新建添加一个qss文件。</span><br><span class="line">右键点击资源文件.qrc-&gt;Qt-&gt;Qt Resource File-&gt;Choose-&gt;填写名称-&gt;下一步</span><br></pre></td></tr></table></figure><ul><li>引入<QRadioButton></QRadioButton></li><li>声明 QRadioButton对象，实例化对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QRadioButton *radioButton1;</span><br><span class="line">QRadioButton *radioButton2;</span><br><span class="line">    </span><br><span class="line">radioButton1 = new QRadioButton(this);</span><br><span class="line">radioButton2 = new QRadioButton(this);</span><br></pre></td></tr></table></figure><ul><li>初始化QRadioButton 状态</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">radioButton1-&gt;setChecked(false);</span><br><span class="line">radioButton2-&gt;setChecked(true);</span><br></pre></td></tr></table></figure><ul><li><p>编写.qss资源文件</p></li><li><p>引用<QFile>打开资源文件</QFile></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QFile file(&quot;:/style.qss&quot;);</span><br><span class="line">    /*if file is exist*/</span><br><span class="line">    if(file.exists())&#123;</span><br><span class="line">        file.open(QFile::ReadOnly);</span><br><span class="line">        QString styleSheet = QLatin1String(file.readAll());</span><br><span class="line"></span><br><span class="line">        /*set global style*/</span><br><span class="line">        qApp-&gt;setStyleSheet(styleSheet);</span><br><span class="line">        file.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="代码示例如下："><a href="#代码示例如下：" class="headerlink" title="代码示例如下："></a>代码示例如下：</h5><p>.qss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">QRadioButton&#123;</span><br><span class="line">    spacing:2px;</span><br><span class="line">    color:white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QRadioButton::indicator&#123;</span><br><span class="line">    width:45px;</span><br><span class="line">    height:30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QRadioButton::indicator:unchecked&#123;</span><br><span class="line">    image: url(:/image/idesign-logo.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QRadioButton::indicator:checked&#123;</span><br><span class="line">    image: url(:/image/SzsFox-logo.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;QApplication&gt;</span><br><span class="line">/*import &lt;QFile&gt;*/</span><br><span class="line">#include &lt;QFile&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QApplication a(argc, argv);</span><br><span class="line">    QFile file(&quot;:/style.qss&quot;);</span><br><span class="line">    /*if file is exist*/</span><br><span class="line">    if(file.exists())&#123;</span><br><span class="line">        file.open(QFile::ReadOnly);</span><br><span class="line">        QString styleSheet = QLatin1String(file.readAll());</span><br><span class="line"></span><br><span class="line">        /*set global style*/</span><br><span class="line">        qApp-&gt;setStyleSheet(styleSheet);</span><br><span class="line">        file.close();</span><br><span class="line">    &#125;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.show();</span><br><span class="line">    return a.exec();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mainwindow.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    /*set mainwindows&#x27;s background-color*/</span><br><span class="line">    this-&gt;setStyleSheet(&quot;QMainWindow &#123;background-color:rgba(200,50,100,100%);&#125;&quot;);</span><br><span class="line"></span><br><span class="line">    radioButton1 = new QRadioButton(this);</span><br><span class="line">    radioButton2 = new QRadioButton(this);</span><br><span class="line"></span><br><span class="line">    /*set radiobutton&#x27;s position and size*/</span><br><span class="line">    radioButton1-&gt;setGeometry(300,200,100,50);</span><br><span class="line">    radioButton2-&gt;setGeometry(400,200,100,50);</span><br><span class="line"></span><br><span class="line">    radioButton1-&gt;setText(&quot;Button1&quot;);</span><br><span class="line">    radioButton2-&gt;setText(&quot;Button2&quot;);</span><br><span class="line"></span><br><span class="line">    /*set radioButton&#x27;s init status*/</span><br><span class="line">    radioButton1-&gt;setChecked(false);</span><br><span class="line">    radioButton2-&gt;setChecked(true);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="QCheckBox"><a href="#QCheckBox" class="headerlink" title="QCheckBox"></a>QCheckBox</h3><p>QCheckBox是三态选择框，可以有三种状态。</p><h4 id="QCheckBox-使用"><a href="#QCheckBox-使用" class="headerlink" title="QCheckBox 使用"></a>QCheckBox 使用</h4><ul><li>添加资源文件</li></ul><p><img src="/2023/09/12/Qt%E6%8C%89%E9%92%AE%E6%8E%A7%E4%BB%B6/image-20230911160821782-1694510917974.png" alt="image-20230911160821782"></p><ul><li>实例化QCheckBox,初始化QCheckBox状态。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*set checkBox status*/</span><br><span class="line">checkBox-&gt;setText(&quot;初始化状态为Checked&quot;);</span><br><span class="line">checkBox-&gt;setCheckState(Qt::Checked);</span><br><span class="line">/*open three status mode*/</span><br><span class="line">checkBox-&gt;setTristate();</span><br><span class="line">/*connect slot*/</span><br><span class="line">connect(checkBox,SIGNAL(stateChanged(int)),this,SLOT(checkBoxStatusChanged(int)));</span><br></pre></td></tr></table></figure><ul><li>实现Slot槽函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void MainWindow::checkBoxStatusChanged(int status)</span><br></pre></td></tr></table></figure><ul><li>编写.qss文件</li></ul><h5 id="代码示例如下"><a href="#代码示例如下" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><p>mainwindow.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    this-&gt;setStyleSheet(&quot;QMainWindow &#123;background-color:rgba(100,100,100,100%);&#125;&quot;);</span><br><span class="line"></span><br><span class="line">    checkBox = new QCheckBox(this);</span><br><span class="line">    checkBox-&gt;setGeometry(350,200,250,50);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*set checkBox status*/</span><br><span class="line">    checkBox-&gt;setText(&quot;初始化状态为Checked&quot;);</span><br><span class="line">    checkBox-&gt;setCheckState(Qt::Checked);</span><br><span class="line">    /*open three status mode*/</span><br><span class="line">    checkBox-&gt;setTristate();</span><br><span class="line">    /*connect slot*/</span><br><span class="line">    connect(checkBox,SIGNAL(stateChanged(int)),this,SLOT(checkBoxStatusChanged(int)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::checkBoxStatusChanged(int status)&#123;</span><br><span class="line">    switch(status)&#123;</span><br><span class="line">    case Qt::Checked:</span><br><span class="line">        checkBox-&gt;setText(&quot;Checked status&quot;);</span><br><span class="line">        break;</span><br><span class="line">    case Qt::Unchecked:</span><br><span class="line">        checkBox-&gt;setText(&quot;Unchecked status&quot;);</span><br><span class="line">        break;</span><br><span class="line">    case Qt::PartiallyChecked:</span><br><span class="line">        checkBox-&gt;setText(&quot;PartiallyChecked status&quot;);</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;QApplication&gt;</span><br><span class="line">#include &lt;QFile&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QApplication a(argc, argv);</span><br><span class="line">    QFile file(&quot;:/style.qss&quot;);</span><br><span class="line">    if(file.exists())&#123;</span><br><span class="line">        file.open(QFile::ReadOnly);</span><br><span class="line">        QString styleSheet = QLatin1String(file.readAll());</span><br><span class="line">        /*set global style*/</span><br><span class="line">        qApp-&gt;setStyleSheet(styleSheet);</span><br><span class="line">        file.close();</span><br><span class="line">    &#125;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.show();</span><br><span class="line">    return a.exec();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.qss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">QCheckBox&#123;</span><br><span class="line">    spacing:5px;</span><br><span class="line">    color:white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QCheckBox::indicator&#123;</span><br><span class="line">    width:50px;</span><br><span class="line">    height:50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QCheckBox::indicator:enabled:unchecked&#123;</span><br><span class="line">    image: url(:/image/chuangzaoshi-logo.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QCheckBox::indicator:enabled:checked&#123;</span><br><span class="line">    image: url(:/image/idesign-logo.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QCheckBox::indicator:enabled:indeterminate&#123;</span><br><span class="line">    image: url(:/image/SzsFox-logo.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QCommandLinkButton"><a href="#QCommandLinkButton" class="headerlink" title="QCommandLinkButton"></a>QCommandLinkButton</h3><p>QCommandLinkButton命令链接按钮 和QRadioButton相似，用于在互斥选项中选择一项，携带一个箭头图标。</p><h4 id="QCommandLinkButton使用"><a href="#QCommandLinkButton使用" class="headerlink" title="QCommandLinkButton使用"></a>QCommandLinkButton使用</h4><ul><li>引用<QCommandLinkButton> ,<QDesktopServices>,<QUrl></QUrl></QDesktopServices></QCommandLinkButton></li><li>声明和实例化QCommandLinkButton</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private:</span><br><span class="line">   QCommandLinkButton *CommandLinkButton;</span><br><span class="line">CommandLinkButton = new QCommandLinkButton(</span><br><span class="line">   &quot;点击打开目录&quot;,this);</span><br></pre></td></tr></table></figure><ul><li>实现信号和槽之间的连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(CommandLinkButton,SIGNAL(clicked()),this,SLOT(CommandLinkButtonClicked()));</span><br></pre></td></tr></table></figure><ul><li>实现CommandLinkButtonClicked槽函数</li></ul><h5 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">/*import desk server,open system folder*/</span><br><span class="line">#include &lt;QDesktopServices&gt;</span><br><span class="line">/*import QUrl*/</span><br><span class="line">#include &lt;QUrl&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line"></span><br><span class="line">    CommandLinkButton = new QCommandLinkButton(</span><br><span class="line">    &quot;点击打开目录&quot;,this);</span><br><span class="line"></span><br><span class="line">    CommandLinkButton-&gt;setGeometry(300,200,250,60);</span><br><span class="line">    connect(CommandLinkButton,SIGNAL(clicked()),this,SLOT(CommandLinkButtonClicked()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainWindow::CommandLinkButtonClicked()&#123;</span><br><span class="line">    /*call system server open catalogue*/</span><br><span class="line">    QDesktopServices::openUrl(QUrl(&quot;D:/emulate&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QDialogButtonBox"><a href="#QDialogButtonBox" class="headerlink" title="QDialogButtonBox"></a>QDialogButtonBox</h3><h4 id="QDialogButtonBox的使用"><a href="#QDialogButtonBox的使用" class="headerlink" title="QDialogButtonBox的使用"></a>QDialogButtonBox的使用</h4><p>​QDialogButtonBox 允许开发人员向其添加按钮，并将自动使用适合用户桌面环境的布局  。我们可以实现自定义按钮。</p><ul><li>引入<QDialogButtonBox></QDialogButtonBox></li><li>声明QDialogButtonBox 对象和QpushButton对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private:</span><br><span class="line">    QDialogButtonBox *dialogButtonBox;</span><br><span class="line">    QPushButton *PushButton;</span><br><span class="line">private slots:</span><br><span class="line">    void DialogButtonBoxClicked(QAbstractButton *);</span><br></pre></td></tr></table></figure><ul><li>实例化QDialogButtonBox对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dialogButtonBox = new QDialogButtonBox(this);</span><br><span class="line">    dialogButtonBox-&gt;setGeometry(300,200,200,30);</span><br><span class="line"></span><br><span class="line">    dialogButtonBox-&gt;addButton(QDialogButtonBox::Cancel);</span><br><span class="line">    dialogButtonBox-&gt;button(QDialogButtonBox::Cancel)-&gt;setText(&quot;取消&quot;);</span><br></pre></td></tr></table></figure><ul><li>实例化QPushButton</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PushButton = new QPushButton(tr(&quot;自定义&quot;));</span><br></pre></td></tr></table></figure><ul><li>将QPushButton添加到QDialogButtonBox里面，并且实现信号和槽的连接。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*will pushbutton add to dialogbuttonBox,and set buttonRole is ActionRole*/</span><br><span class="line">    dialogButtonBox-&gt;addButton(PushButton,QDialogButtonBox::ActionRole);</span><br><span class="line">    connect(dialogButtonBox,SIGNAL(clicked(QAbstractButton *)),this,SLOT(DialogButtonBoxClicked(QAbstractButton *)));</span><br></pre></td></tr></table></figure><ul><li>槽函数的实现</li></ul><h5 id="代码示例如下-1"><a href="#代码示例如下-1" class="headerlink" title="代码示例如下"></a>代码示例如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;setGeometry(0,0,800,480);</span><br><span class="line">    dialogButtonBox = new QDialogButtonBox(this);</span><br><span class="line">    dialogButtonBox-&gt;setGeometry(300,200,200,30);</span><br><span class="line"></span><br><span class="line">    dialogButtonBox-&gt;addButton(QDialogButtonBox::Cancel);</span><br><span class="line">    dialogButtonBox-&gt;button(QDialogButtonBox::Cancel)-&gt;setText(&quot;取消&quot;);</span><br><span class="line"></span><br><span class="line">    PushButton = new QPushButton(tr(&quot;自定义&quot;));</span><br><span class="line">    /*will pushbutton add to dialogbuttonBox,and set buttonRole is ActionRole*/</span><br><span class="line">    dialogButtonBox-&gt;addButton(PushButton,QDialogButtonBox::ActionRole);</span><br><span class="line">    connect(dialogButtonBox,SIGNAL(clicked(QAbstractButton *)),this,SLOT(DialogButtonBoxClicked(QAbstractButton *)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void MainWindow::DialogButtonBoxClicked(QAbstractButton *button)&#123;</span><br><span class="line">    if(button == dialogButtonBox-&gt;button((QDialogButtonBox::Cancel)))&#123;</span><br><span class="line">        qDebug() &lt;&lt;&quot;clicked Cancel&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;else if(button == PushButton)&#123;</span><br><span class="line">        qDebug() &lt;&lt;&quot;clicked self button&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Qt按钮控件的使用&quot;&gt;&lt;a href=&quot;#Qt按钮控件的使用&quot; class=&quot;headerlink&quot; title=&quot;Qt按钮控件的使用&quot;&gt;&lt;/a&gt;Qt按钮控件的使用&lt;/h2&gt;&lt;h2 id=&quot;按钮控件（button）&quot;&gt;&lt;a href=&quot;#按钮控件（button）&quot;</summary>
      
    
    
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>__atrribute__的一些用法</title>
    <link href="http://example.com/2023/01/27/atrribute-%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2023/01/27/atrribute-%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/</id>
    <published>2023-01-27T12:00:31.000Z</published>
    <updated>2023-09-13T01:49:59.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="attribute-用法"><a href="#attribute-用法" class="headerlink" title="__attribute__用法"></a>__attribute__用法</h1><h3 id="attribute属性声明：format"><a href="#attribute属性声明：format" class="headerlink" title="attribute属性声明：format"></a>attribute属性声明：format</h3><p>GNU 通过 <strong>atttribute</strong> 扩展的 format 属性，用来<em><strong>指定变参函数的参数格式检查</strong></em>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__attribute__(( format (archetype, string-index, first-to-check)))</span><br></pre></td></tr></table></figure><ul><li>archetype：指定格式类型</li><li>string-index：格式字符串的位置在所有参数列表中的索引</li><li>first-to-check：编译器帮忙检查的参数，在所有的参数列表里索引的位置</li></ul><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void LOG(const char *fmt, ...)  __attribute__((format(printf,1,2)));</span><br></pre></td></tr></table></figure><ul><li><p>第一个参数 printf 是告诉编译器，按照 printf 函数的检查标准来检查；</p></li><li><p>第2个参数表示在 LOG 函数所有的参数列表中，格式字符串的位置索引；</p></li><li><p>第3个参数是告诉编译器要检查的参数的起始位置。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void LOG(int num, char *fmt, ...)  __attribute__((format(printf,2,3)));</span><br></pre></td></tr></table></figure><p>在这个函数定义中，多了一个参数 num，格式字符串在参数列表中的位置发生了变化（在所有的参数列表中，索引为2），要检查的第一个变参的位置也发生了变化（索引为3），那我们使用 format 属性声明时，就要写成 format(printf,2,3) 的形式了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((format(printf,1,2))) ESP_LOGI(char *fmt,...) </span><br><span class="line">&#123;</span><br><span class="line">va_list arg;</span><br><span class="line">    va_start(arg, fmt);</span><br><span class="line">    vprintf(fmt, arg);</span><br><span class="line">    va_end(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;attribute-用法&quot;&gt;&lt;a href=&quot;#attribute-用法&quot; class=&quot;headerlink&quot; title=&quot;__attribute__用法&quot;&gt;&lt;/a&gt;__attribute__用法&lt;/h1&gt;&lt;h3 id=&quot;attribute属性声明：forma</summary>
      
    
    
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>mqtt协议解析</title>
    <link href="http://example.com/2023/01/18/mqtt%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2023/01/18/mqtt%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/</id>
    <published>2023-01-18T06:53:02.000Z</published>
    <updated>2023-09-13T01:49:59.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MQTT数据帧解析"><a href="#MQTT数据帧解析" class="headerlink" title="MQTT数据帧解析"></a>MQTT数据帧解析</h1><p>[TOC]</p><h2 id="MQTT-控制报文格式"><a href="#MQTT-控制报文格式" class="headerlink" title="MQTT 控制报文格式"></a>MQTT 控制报文格式</h2><h4 id="MQTT控制报文结构组成"><a href="#MQTT控制报文结构组成" class="headerlink" title="MQTT控制报文结构组成"></a>MQTT控制报文结构组成</h4><ul><li>固定报头（所有控制报文都包含）</li><li>可变报头</li><li>消息体</li></ul><h4 id="固定报头的组成格式"><a href="#固定报头的组成格式" class="headerlink" title="固定报头的组成格式"></a>固定报头的组成格式</h4><p><img src="/2023/01/18/mqtt%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/image-20230118145809356.png" alt="image-20230118145809356"></p><ul><li><p><strong>控制报文的类型</strong></p><ul><li>控制报文的类型由第一个字节的4-7位组成</li></ul><p><img src="/2023/01/18/mqtt%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/image-20230118150005166.png" alt="image-20230118150005166"></p><p><img src="/2023/01/18/mqtt%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/image-20230118150027077.png" alt="image-20230118150027077"></p></li><li><p><strong>控制报文类型标志位</strong></p><p><img src="/2023/01/18/mqtt%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/image-20230118150625999.png" alt="image-20230118150625999"></p></li><li><p><strong>剩余长度</strong>：从第二个字节开始，剩余长度（Remaining Length） 表示当前报文剩余部分的字节数， 包括可变报头和负载的数据。 剩余长度不包括用于编码剩余长度字段本身的字节数。  </p><p><img src="/2023/01/18/mqtt%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/image-20230118212354474.png" alt="image-20230118212354474"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">分别表示（每个字节的低 7 位用于编码数据， 最高位是标志位） ：</span><br><span class="line">1 个字节时， 从 0(0x00)到 127(0x7f)</span><br><span class="line">2 个字节时， 从 128(0x80,0x01)到 16383(0Xff,0x7f)</span><br><span class="line">3 个字节时， 从 16384(0x80,0x80,0x01)到 2097151(0xFF,0xFF,0x7F)</span><br><span class="line">4 个字节时， 从 2097152(0x80,0x80,0x80,0x01)到 268435455(0xFF,0xFF,0xFF,0x7F)</span><br></pre></td></tr></table></figure><h4 id="可变报头"><a href="#可变报头" class="headerlink" title="可变报头"></a>可变报头</h4><p><strong>可变报头在固定报头和负载之间，可变报头的内容根据报文类型的不同而不同</strong></p><ul><li><p><strong>报文标识符</strong></p><ul><li><strong>报文标识符类型</strong></li></ul><p><img src="/2023/01/18/mqtt%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/image-20230118151514215.png" alt="image-20230118151514215"></p><ul><li><p>很多控制报文的可变报头部分包含一个两字节的报文标识符字段。 这些报文是 PUBLISH（QoS&gt;0 时），<br>  PUBACK， PUBREC， PUBREL， PUBCOMP， SUBSCRIBE, SUBACK， UNSUBSCIBE，UNSUBACK。 </p></li><li><p>&#96;&#96;&#96;<br>1、SUBSCRIBE， UNSUBSCRIBE 和 PUBLISH（QoS 大于 0） 控制报文必须包含一个非零的 16 位报文标识<br>符（Packet Identifier）。<br>2、客户端每次发送一个新的这些类型的报文时都必须分配一个当前未使用的报文标识符。<br>3、如果一个客户端要重发这个特殊的控制报文，在随后重发那个报文时， 它必须使用相同的标识符。 当客户端处理完这个报文对应的确认后，这个报文标识符就释放可重用。<br>4、QoS 1 的 PUBLISH 对应的是 PUBACK， QoS 2 的 PUBLISH 对应的是 PUBCOMP，与 SUBSCRIBE 或<br>UNSUBSCRIBE 对应的分别是 SUBACK 或 UNSUBACK [MQTT-2.3.1-3]。<br>5、QoS 设置为 0 的 PUBLISH 报文不能包含报文标识符<br>6、PUBACK, PUBREC, PUBREL 报文必须包含与最初发送的 PUBLISH 报文相同的报文标识符<br>7、SUBACK 和 UNSUBACK 必须包含在对应的 SUBSCRIBE 和 UNSUBSCRIBE 报文中使用的报文标识符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - **包含标识符的控制报文**</span><br><span class="line"></span><br><span class="line">  ​![image-20230118152304772](mqtt协议解析/image-20230118152304772.png)</span><br><span class="line"></span><br><span class="line">客户端和服务端彼此独立地分配报文标识符。 因此，客户端服务端组合使用相同的报文标识符可以实现并</span><br><span class="line">发的消息交换。  </span><br><span class="line"></span><br><span class="line">## MQTT控制报文</span><br><span class="line"></span><br><span class="line">### 1、CONNECT-连接服务端</span><br><span class="line"></span><br><span class="line">#### 客户端和服务端的网络建立后，第一个报文必须是connect报文，且一个网络连接上只能发送一个网络连接</span><br><span class="line"></span><br><span class="line">##### connect连接的固定报头（0x10）</span><br><span class="line"></span><br><span class="line">![image-20230118153045359](mqtt协议解析/image-20230118153045359.png)</span><br><span class="line"></span><br><span class="line">***剩余字段长度长度等于有效负荷长度加上可变报头的长度***</span><br><span class="line"></span><br><span class="line">#### 可变报头长度</span><br><span class="line"></span><br><span class="line">***CONNECT 报文的可变报头按下列次序包含四个字段：***</span><br><span class="line"></span><br><span class="line">- 协议名（Protocol Name） **（协议名是表示协议名 MQTT 的 UTF-8 编码的字符串） **</span><br><span class="line"></span><br><span class="line">  - 协议名构成</span><br><span class="line"></span><br><span class="line">  ![image-20230118153430526](mqtt协议解析/image-20230118153430526.png)</span><br><span class="line"></span><br><span class="line">  ![image-20230118153505227](mqtt协议解析/image-20230118153505227.png)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- 协议级别（ProtocolLevel） </span><br><span class="line"></span><br><span class="line">  - Protocol Level byte 协议级别字节构成  </span><br><span class="line"></span><br><span class="line">  ![image-20230118153636758](mqtt协议解析/image-20230118153636758.png)</span><br><span class="line"></span><br><span class="line">-  连接标志（Connect Flags）</span><br><span class="line"></span><br><span class="line">  - 连接标志位**（连接标志字节包含一些用于指定 MQTT 连接行为的参数。 它还指出有效载荷中的字段是否存在。）  **</span><br><span class="line">  - 服务端必须验证 CONNECT 控制报文的保留标志位（第 0 位） 是否为 0， 如果不为 0 必须断开客户端连接 。</span><br><span class="line"></span><br><span class="line">  ![image-20230118153804825](mqtt协议解析/image-20230118153804825.png)</span><br><span class="line"></span><br><span class="line">  - 清理会话（CleanSession）</span><br><span class="line"></span><br><span class="line">    - CleanSession置0：**表示创建一个持久会话，在客户端断开连接时，会话仍然保持并保存离线消息，直到会话超时注销。**</span><br><span class="line">    - CleanSession置1：**表示创建一个新的临时会话，在客户端断开时，会话自动销毁。**</span><br><span class="line"></span><br><span class="line">  - 遗嘱标志（Will Flsg）</span><br><span class="line"></span><br><span class="line">    - WillFlag位置1：表示如果连接请求被接受了， 遗嘱（Will Message） 消息必须被存储在服务端并且与这个网络连接关联。  之后网络连接关闭时，服务端必须发布这个遗嘱消息， 除非服务端收到DISCONNECT 报文时删除了这个遗嘱消息  。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  可以理解为简而言之，就是客户端预先定义好，在自己异常断开的情况下，所留下的最后遗愿（Last Will），也称之为遗嘱（Testament）。这个遗嘱就是一个由客户端预先定义好的主题和对应消息，附加在CONNECT的可变报文头部中，在客户端连接出现异常的情况下，由服务器主动发布此消息。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - WillFlag位置0：网络连接断开时， 不能发送遗嘱消息  </span><br><span class="line"></span><br><span class="line">  - 遗嘱QoS标志（WillQos）**两位标志位用于指定发布遗嘱消息时使用的服务质量等级。  **</span><br><span class="line"></span><br><span class="line">    - WillQoS可以设置：</span><br><span class="line">      - 0x00：遗嘱 QoS  服务质量等级  0</span><br><span class="line">      - 0x01：遗嘱 QoS  服务质量等级  1</span><br><span class="line">      - 0x02：遗嘱 QoS  服务质量等级  2</span><br><span class="line"></span><br><span class="line">  - 遗嘱保留标志（WillRetain）：</span><br><span class="line"></span><br><span class="line">    - WillRetain置0：遗嘱消息被发布时需要保留  </span><br><span class="line">    - WillRetain置1：遗嘱消息被发布时不需要保留  </span><br><span class="line"></span><br><span class="line">  - 用户标志（UserNameFlag）</span><br><span class="line"></span><br><span class="line">    - UserNameFlag置0：有效载荷中不能包含用户名字段  </span><br><span class="line">    - UserNameFlag置1：有效载荷中必须包含用户名字段  </span><br><span class="line"></span><br><span class="line">  - 密码标志（PasswordFlag）**（如果用户名标志被设置为 0， 密码标志也必须设置为 0  ）**</span><br><span class="line"></span><br><span class="line">    - PasswordFlag置0：有效载荷中不能包含密码字段  </span><br><span class="line">    - PasswordFlag置1：有效载荷中必须包含密码字段  </span><br><span class="line"></span><br><span class="line">- 保持连接（Keep Alive） </span><br><span class="line"></span><br><span class="line">  **保持字节连接**</span><br><span class="line"></span><br><span class="line">  ![image-20230118161545118](mqtt协议解析/image-20230118161545118.png)</span><br><span class="line"></span><br><span class="line">  保持连接（Keep Alive） 是一个以秒为单位的时间间隔，表示为一个 16 位的字，它是指在客户端传输完成一个控制报文的时刻到发送下一个报文的时刻， 两者之间允许空闲的最大时间间隔。  </span><br><span class="line"></span><br><span class="line">  - 保持连接的值为零表示关闭保持连接功能  </span><br><span class="line"></span><br><span class="line">  - 如果没有任何其它的控制报文可以发送， 客户端必须发送一个**PINGREQ** 报文  </span><br><span class="line">  - 不管保持连接的值是多少，客户端任何时候都可以发送 PINGREQ 报文，并且使用 PINGRESP 报文判断网络和服务端的活动状态。  </span><br><span class="line"></span><br><span class="line">  - 客户端发送了 PINGREQ 报文之后， 如果在**合理的时间内仍没有收到 PINGRESP 报文**， 它应该关闭到服务端的网络连接。  </span><br><span class="line"></span><br><span class="line">#### 有效负载</span><br><span class="line"></span><br><span class="line">***CONNECT 报文的有效载荷（payload） 包含一个或多个以长度为前缀的字段，可变报头中的标志决定是否包含这些字段。 如果包含的话， 必须按这个顺序出现：客户端标识符， 遗嘱主题， 遗嘱消息， 用户名， 密码***</span><br><span class="line"></span><br><span class="line">- 客户端标识符（**服务端使用客户端表示符识别客户端**）</span><br><span class="line"></span><br><span class="line">  - 连接服务端的每个客户端都有**唯一的客户端标识符**（ClientId） 。客户端和服务端都必须使用 ClientId 识别两者之间的 MQTT 会话相关的状态。</span><br><span class="line"></span><br><span class="line">  - 客户端标识符 (ClientId) 必须存在而且必须是 CONNECT 报文有效载荷的第一个字段   （**标识符ID必须是UTF8编码，只能包含大小写字母和数字**）</span><br><span class="line"></span><br><span class="line">  - 服务端可以允许客户端提供一个零字节的客户端标识符 (ClientId)  ，务端必须将这看作特殊情况并分配唯一的客户端标识符给那个客户端。如果客户端提供了一个零字节的客户端标识符， 它必须同时将清理会话标志设置为 1    </span><br><span class="line"></span><br><span class="line">- 遗嘱主题</span><br><span class="line"></span><br><span class="line">  如果遗嘱标志被设置为 1， 有效载荷的下一个字段是遗嘱主题（Will Topic）  </span><br><span class="line"></span><br><span class="line">- 遗嘱消息</span><br><span class="line"></span><br><span class="line">  如果遗嘱标志被设置为 1， 有效载荷的下一个字段是遗嘱消息。  </span><br><span class="line"></span><br><span class="line">- 用户名</span><br><span class="line"></span><br><span class="line">  如果用户名（User Name） 标志被设置为 1， 有效载荷的下一个字段就是它。   </span><br><span class="line"></span><br><span class="line">- 密码</span><br><span class="line"></span><br><span class="line">  如果密码（Password） 标志被设置为 1， 有效载荷的下一个字段就是它。  密码字段包含一个两字节的长度字段， 长度表示二进制数据的字节数（不包含长度字段本身占用的两个字节） ， 后面跟着 0 到 65535 字节的二进制数据。  </span><br><span class="line"></span><br><span class="line">#### 响应</span><br><span class="line"></span><br><span class="line">- 服务端响应</span><br><span class="line">  - 网络连接建立后， 如果服务端在合理的时间内没有收到 CONNECT 报文， 服务端应该关闭这个连接。  </span><br><span class="line">  - 服务端必须按照 3.1 节的要求验证 CONNECT 报文， 如果报文不符合规范， 服务端不发送CONNACK 报文直接关闭网络连接  。</span><br><span class="line">  - 如果任何一项检查没通过，按照 3.2 节的描述，它应该发送一个适当的、 返回码非零的CONNACK 响应， 并且必须关闭这个网络连接。  </span><br><span class="line"></span><br><span class="line">### 2、CONNACK-确认连接请求</span><br><span class="line"></span><br><span class="line">#### CONNACK固定报头</span><br><span class="line"></span><br><span class="line">![image-20230118165402419](mqtt协议解析/image-20230118165402419.png)</span><br><span class="line"></span><br><span class="line">***剩余长度字段  ：***</span><br><span class="line"></span><br><span class="line">- 表示可变报头的长度。 对于 CONNACK 报文这个值等于 2。  </span><br><span class="line"></span><br><span class="line">#### 可变报头</span><br><span class="line"></span><br><span class="line">![image-20230118165749540](mqtt协议解析/image-20230118165749540.png)</span><br><span class="line"></span><br><span class="line">- **确认连接标志**</span><br><span class="line">  - 第 1 个字节是 连接确认标志， 位 7-1 是保留位且必须设置为 0。  第 0 (SP)位 是当前会话（Session Present） 标志。  </span><br><span class="line"></span><br><span class="line">- **当前会话**（**连接确认标志的第 0 位。**）</span><br><span class="line"></span><br><span class="line">  -   如果服务端收到清理会话（CleanSession） 标志为 1 的连接，除了将 CONNACK 报文中的返回码设置为 0之外，还必须将 CONNACK 报文中的当前会话设置（Session Present） 标志为 0  </span><br><span class="line"></span><br><span class="line">  - 如果服务端收到一个 CleanSession 为 0 的连接， 当前会话标志的值取决于服务端是否已经保存了 ClientId对应客户端的会话状态。  </span><br><span class="line"></span><br><span class="line">    - 如果服务端已经保存了会话状态， 它必须将 CONNACK 报文中的当前会话标志设置为 1</span><br><span class="line">    - 如果服务端没有已保存的会话状态， 它必须将 CONNACK 报文中的当前会话设置为 0，还需要将 CONNACK 报文中的返回码设置为 0  。</span><br><span class="line"></span><br><span class="line">    - 如果服务端发送了一个包含非零返回码的 CONNACK 报文， 它必须将当前会话标志设置为 0  </span><br><span class="line"></span><br><span class="line">- **连接返回码（可变报头的第二个字节）**</span><br><span class="line"></span><br><span class="line">  ![image-20230118170752934](mqtt协议解析/image-20230118170752934.png)</span><br><span class="line"></span><br><span class="line">  ![image-20230118170806394](mqtt协议解析/image-20230118170806394.png)</span><br><span class="line"></span><br><span class="line">#### 有效负载</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">### 3、PUBLISH-发布消息</span><br><span class="line"></span><br><span class="line">#### publish的固定报头：</span><br><span class="line"></span><br><span class="line">![image-20230118171158474](mqtt协议解析/image-20230118171158474.png)</span><br><span class="line"></span><br><span class="line">- **重发标志位** **（第一个字节第3位）**</span><br><span class="line">  - DUP 标志被设置为 0， 表示这是客户端或服务端第一次请求发送这个 PUBLISH 报文  </span><br><span class="line">  - DUP 标志被设置为 1，表示这可能是一个早前报文请求的重发。  </span><br><span class="line">  - **客户端或服务端请求重发一个 PUBLISH 报文时， 必须将 DUP 标志设置为 1 ， 对于 QoS0 的消息， DUP 标志必须设置为 0  **</span><br><span class="line"></span><br><span class="line">- **服务质量等级** **（第一个字节第1，2位）**</span><br><span class="line"></span><br><span class="line">  - QoS值 = 00：最多分发一次</span><br><span class="line">  - QoS值 = 01：至少分发一次</span><br><span class="line">  - QoS值 = 10：只分发一次</span><br><span class="line">  - QoS值 = 11：保留位</span><br><span class="line"></span><br><span class="line">- **保留标志位** **（第一个字节第0位）**</span><br><span class="line"></span><br><span class="line">  - 如果客户端发给服务端的 PUBLISH 报文的保留（RETAIN） 标志被设置为 1， 服务端必须存储这个应用消息和它的服务质量等级（QoS） ，以便它可以被分发给未来的主题名匹配的订阅者  </span><br><span class="line"></span><br><span class="line">  - 服务端发送 PUBLISH 报文给客户端时，如果消息是作为客户端一个新订阅的结果发送， 它必须将报文的保留标志设为 1  </span><br><span class="line">  - 当一个 PUBLISH 报文发送给客户端是因为匹配一个已建立的订阅时，服务端必须将保留标志设为 0  </span><br><span class="line">  - 保留标志为 1 且有效载荷为零字节的 PUBLISH 报文会被服务端当作正常消息处理，它会被发送给订阅主题匹配的客户端。此外，同一个主题下任何现存的保留消息必须被移除，因此这个主题之后的任何订阅者都不会收到一个保留消息  </span><br><span class="line">  - 如果客户端发给服务端的 PUBLISH 报文的保留标志位 0， 服务端不能存储这个消息也不能移除或替换任何现存的保留消息  </span><br><span class="line"></span><br><span class="line">- 剩余长度</span><br><span class="line"></span><br><span class="line">#### publish可变报头</span><br><span class="line"></span><br><span class="line">##### 主题名</span><br><span class="line"></span><br><span class="line">- 主题名必须是 PUBLISH 报文可变报头的第一个字段。   </span><br><span class="line">- PUBLISH 报文中的主题名不能包含通配符   </span><br><span class="line"></span><br><span class="line">##### 报文标识符</span><br><span class="line"></span><br><span class="line">​只有当 QoS 等级是 1 或 2 时，报文标识符（Packet Identifier） 字段才能出现在 PUBLISH 报文中。   </span><br><span class="line"></span><br><span class="line">##### 有效负荷</span><br><span class="line"></span><br><span class="line">​有效载荷包含将被发布的应用消息。  有效载荷的长度这样计算： 用固定报头中的剩余长度字段的值减去可变报头的长度。  </span><br><span class="line"></span><br><span class="line">##### 响应</span><br><span class="line"></span><br><span class="line">- 服务质量等级Qos0：无响应</span><br><span class="line">- 服务质量等级Qos1：PUBACK 报文</span><br><span class="line">- 服务质量等级Qos2：PUBREC 报文</span><br><span class="line"></span><br><span class="line">##### 动作</span><br><span class="line"></span><br><span class="line">​客户端使用 PUBLISH 报文发送应用消息给服务端， 目的是分发到其它订阅匹配的客户端。  </span><br><span class="line"></span><br><span class="line">​服务端使用 PUBLISH 报文发送应用消息给每一个订阅匹配的客户端。  </span><br><span class="line"></span><br><span class="line">### 4、PUBACK –发布确认  </span><br><span class="line"></span><br><span class="line">PUBACK 报文是对 QoS 1 等级的 PUBLISH 报文的响应。 </span><br><span class="line"></span><br><span class="line">#### PUBACK 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118173146808](mqtt协议解析/image-20230118173146808.png) </span><br><span class="line"></span><br><span class="line">![image-20230118173205345](mqtt协议解析/image-20230118173205345.png)</span><br><span class="line"></span><br><span class="line">剩余长度字段</span><br><span class="line">表示可变报头的长度。对 PUBACK 报文这个值等于 2.  </span><br><span class="line"></span><br><span class="line">#### 可变报头  </span><br><span class="line"></span><br><span class="line">包含等待确认的 PUBLISH 报文的报文标识符  </span><br><span class="line"></span><br><span class="line">![image-20230118173304813](mqtt协议解析/image-20230118173304813.png)</span><br><span class="line"></span><br><span class="line">#### 有效负载</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">### 5、PUBREC – 发布收到（QoS 2， 第一步）  </span><br><span class="line"></span><br><span class="line">#### PUBREC 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118173620945](mqtt协议解析/image-20230118173620945.png)</span><br><span class="line"></span><br><span class="line">剩余长度字段</span><br><span class="line">表示可变报头的长度。 对 PUBREC 报文它的值等于 2。  </span><br><span class="line"></span><br><span class="line">#### PUBREC 可变报头  </span><br><span class="line"></span><br><span class="line">可变报头包含等待确认的 PUBLISH 报文的报文标识符。  </span><br><span class="line"></span><br><span class="line">![image-20230118173711725](mqtt协议解析/image-20230118173711725.png)</span><br><span class="line"></span><br><span class="line">#### 有效负载</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">### 6、PUBREL – 发布释放（QoS 2， 第二步）  </span><br><span class="line"></span><br><span class="line">PUBREL 报文是对 PUBREC 报文的响应。 它是 QoS 2 等级协议交换的第三个报文。  </span><br><span class="line"></span><br><span class="line">#### 固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118173845828](mqtt协议解析/image-20230118173845828.png)</span><br><span class="line"></span><br><span class="line">**PUBREL 控制报文固定报头的第 3,2,1,0 位是保留位， 必须被设置为 0,0,1,0。 **</span><br><span class="line"></span><br><span class="line">剩余长度字段</span><br><span class="line">表示可变报头的长度。 对 PUBREL 报文这个值等于 2.   </span><br><span class="line"></span><br><span class="line">#### PUBREL 报文可变报头  </span><br><span class="line"></span><br><span class="line">可变报头包含与等待确认的 PUBREC 报文相同的报文标识符。  </span><br><span class="line"></span><br><span class="line">![image-20230118173946287](mqtt协议解析/image-20230118173946287.png)</span><br><span class="line"></span><br><span class="line">#### 有效负载</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">### 7 、PUBCOMP – 发布完成（QoS 2， 第三步）</span><br><span class="line"></span><br><span class="line">PUBCOMP 报文是对 PUBREL 报文的响应。 它是 QoS 2 等级协议交换的第四个也是最后一个报文。    </span><br><span class="line"></span><br><span class="line">#### PUBCOMP 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118174114030](mqtt协议解析/image-20230118174114030.png)</span><br><span class="line"></span><br><span class="line">剩余长度字段</span><br><span class="line">表示可变报头的长度。 对 PUBCOMP 报文这个值等于 2。  </span><br><span class="line"></span><br><span class="line">#### PUBCOMP 报文可变报头  </span><br><span class="line"></span><br><span class="line">可变报头包含与等待确认的 PUBREL 报文相同的报文标识符。  </span><br><span class="line"></span><br><span class="line">![image-20230118174227721](mqtt协议解析/image-20230118174227721.png)</span><br><span class="line"></span><br><span class="line">#### 有效负载</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">### 8、SUBSCRIBE - 订阅主题  </span><br><span class="line"></span><br><span class="line">客户端向服务端发送 SUBSCRIBE 报文用于创建一个或多个订阅。 每个订阅注册客户端关心的一个或多个主题。 为了将应用消息转发给与那些订阅匹配的主题， 服务端发送 PUBLISH 报文给客户端。 SUBSCRIBE报文也（为每个订阅） 指定了最大的 QoS 等级， 服务端根据这个发送应用消息给客户端。  </span><br><span class="line"></span><br><span class="line">#### SUBSCRIBE 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118174630367](mqtt协议解析/image-20230118174630367.png)</span><br><span class="line"></span><br><span class="line">**SUBSCRIBE 控制报固定报头的第 3,2,1,0 位是保留位， 必须分别设置为 0,0,1,0。**  </span><br><span class="line"></span><br><span class="line">剩余长度字段</span><br><span class="line">等于可变报头的长度（2 字节） 加上有效载荷的长度。  </span><br><span class="line"></span><br><span class="line">#### SUBSCRIBE 可变报头</span><br><span class="line"></span><br><span class="line">可变报头包含客户端标识符。  </span><br><span class="line"></span><br><span class="line">#### SUBSCRIBE 有效载荷</span><br><span class="line"></span><br><span class="line">SUBSCRIBE 报文的有效载荷包含了一个主题过滤器列表， 它们表示客户端想要订阅的主题。  </span><br><span class="line"></span><br><span class="line">**报文有效载荷格式**</span><br><span class="line"></span><br><span class="line">![image-20230118174912107](mqtt协议解析/image-20230118174912107.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 有效载荷字节格式非规范示例  </span><br><span class="line"></span><br><span class="line">![image-20230118175051471](mqtt协议解析/image-20230118175051471.png)</span><br><span class="line"></span><br><span class="line">![image-20230118175107151](mqtt协议解析/image-20230118175107151.png)</span><br><span class="line"></span><br><span class="line">#### 响应</span><br><span class="line"></span><br><span class="line">服务端收到客户端发送的一个 SUBSCRIBE 报文时， 必须使用 SUBACK 报文响应  </span><br><span class="line"></span><br><span class="line">SUBACK 报文必须和等待确认的 SUBSCRIBE 报文有相同的报文标识符  </span><br><span class="line"></span><br><span class="line">### 9、 SUBACK – 订阅确认  </span><br><span class="line"></span><br><span class="line">服务端发送 SUBACK 报文给客户端， 用于确认它已收到并且正在处理 SUBSCRIBE 报文。  </span><br><span class="line"></span><br><span class="line">SUBACK 报文包含一个返回码清单， 它们指定了 SUBSCRIBE 请求的每个订阅被授予的最大 QoS 等级。  </span><br><span class="line"></span><br><span class="line">#### SUBACK 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118175316108](mqtt协议解析/image-20230118175316108.png)</span><br><span class="line"></span><br><span class="line">剩余长度字段</span><br><span class="line">等于可变报头的长度加上有效载荷的长度。  </span><br><span class="line"></span><br><span class="line">#### SUBACK 报文可变报头  </span><br><span class="line"></span><br><span class="line">可变报头包含等待确认的 SUBSCRIBE 报文的报文标识符。  </span><br><span class="line"></span><br><span class="line">![image-20230118175404006](mqtt协议解析/image-20230118175404006.png)</span><br><span class="line"></span><br><span class="line">#### 有效载荷</span><br><span class="line"></span><br><span class="line">有效载荷包含一个返回码清单。 每个返回码对应等待确认的 SUBSCRIBE 报文中的一个主题过滤器。</span><br><span class="line"></span><br><span class="line">返回码的顺序必须和 SUBSCRIBE 报文中主题过滤器的顺序相同  </span><br><span class="line"></span><br><span class="line">##### 有效载荷格式</span><br><span class="line"></span><br><span class="line">![image-20230118175637006](mqtt协议解析/image-20230118175637006.png)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>允许的返回码值：<br>0x00 - 最大 QoS 0<br>0x01 - 成功 – 最大 QoS 1<br>0x02 - 成功 – 最大 QoS 2<br>0x80 - Failure 失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 10 、UNSUBSCRIBE –取消订阅  </span><br><span class="line"></span><br><span class="line">客户端发送 UNSUBSCRIBE 报文给服务端， 用于取消订阅主题。  </span><br><span class="line"></span><br><span class="line">#### UNSUBSCRIBE 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118175754029](mqtt协议解析/image-20230118175754029.png)</span><br><span class="line"></span><br><span class="line">剩余长度字段</span><br><span class="line">等于可变报头的长度加上有效载荷的长度。  </span><br><span class="line"></span><br><span class="line">#### UNSUBSCRIBE 报文可变报头  </span><br><span class="line"></span><br><span class="line">![image-20230118175834119](mqtt协议解析/image-20230118175834119.png)</span><br><span class="line"></span><br><span class="line">可变报头包含一个报文标识符。  </span><br><span class="line"></span><br><span class="line">#### 有效载荷</span><br><span class="line"></span><br><span class="line">UNSUBSCRIBE 报文的有效载荷包含客户端想要取消订阅的主题过滤器列表。  </span><br><span class="line"></span><br><span class="line">#### 响应</span><br><span class="line"></span><br><span class="line">服务端必须发送 UNSUBACK 报文响应客户端的 UNSUBSCRIBE 请求。</span><br><span class="line"></span><br><span class="line">UNSUBACK 报文必须包含和UNSUBSCRIBE 报文相同的报文标识符。 即使没有删除任何主题订阅， 服务端也必须发送一个 SUBACK 响应。  </span><br><span class="line"></span><br><span class="line">### 11、UNSUBACK – 取消订阅确认  </span><br><span class="line"></span><br><span class="line">服务端发送 UNSUBACK 报文给客户端用于确认收到 UNSUBSCRIBE 报文。  </span><br><span class="line"></span><br><span class="line">#### UNSUBACK 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118202732410](mqtt协议解析/image-20230118202732410.png)</span><br><span class="line"></span><br><span class="line">剩余长度字段</span><br><span class="line">表示可变报头的长度， 对 UNSUBACK 报文这个值等于 2。  </span><br><span class="line"></span><br><span class="line">#### 可变报头  </span><br><span class="line"></span><br><span class="line">可变报头包含等待确认的 UNSUBSCRIBE 报文的报文标识符。  </span><br><span class="line"></span><br><span class="line">![image-20230118202813135](mqtt协议解析/image-20230118202813135.png)</span><br><span class="line"></span><br><span class="line">### 有效负载</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">## 12、PINGREQ – 心跳请求  </span><br><span class="line"></span><br><span class="line">#### 客户端发送 PINGREQ 报文给服务端的。  </span><br><span class="line"></span><br><span class="line">- 在没有任何其它控制报文从客户端发给服务的时，告知服务端客户端还活着。  </span><br><span class="line">- 请求服务端发送 响应确认它还活着。  </span><br><span class="line">- 使用网络以确认网络连接没有断开。  </span><br><span class="line"></span><br><span class="line">保持连接（Keep Alive） 处理中用到这个报文  。</span><br><span class="line"></span><br><span class="line">#### PINGREQ 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118203020292](mqtt协议解析/image-20230118203020292.png)</span><br><span class="line"></span><br><span class="line">![image-20230118203038983](mqtt协议解析/image-20230118203038983.png)</span><br><span class="line"></span><br><span class="line">#### 可变报头</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">#### 有效载荷</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">#### 响应</span><br><span class="line"></span><br><span class="line">服务端必须发送 PINGRESP 报文响应客户端的 PINGREQ 报文  </span><br><span class="line"></span><br><span class="line">### 13、PINGRESP – 心跳响应  </span><br><span class="line"></span><br><span class="line">服务端发送 PINGRESP 报文响应客户端的 PINGREQ 报文。 表示服务端还活着。  </span><br><span class="line"></span><br><span class="line">#### PINGRESP 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118203421595](mqtt协议解析/image-20230118203421595.png)</span><br><span class="line"></span><br><span class="line">#### 可变报头</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">#### 有效载荷</span><br><span class="line"></span><br><span class="line">无</span><br><span class="line"></span><br><span class="line">### 14、DISCONNECT –断开连接  </span><br><span class="line"></span><br><span class="line">DISCONNECT 报文是客户端发给服务端的最后一个控制报文。表示客户端正常断开连接。  </span><br><span class="line"></span><br><span class="line">#### DISCONNECT 报文固定报头  </span><br><span class="line"></span><br><span class="line">![image-20230118203629687](mqtt协议解析/image-20230118203629687.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 报文例子详解</span><br><span class="line"></span><br><span class="line">#### 1、CONECT 报文（client）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte) 0x01 ??<br>可变报头<br>    协议名(6byte) 0x00 0x04 ‘M’ ‘Q’ ‘T’ ‘T’<br>    协议级别(1byte) ??<br>    连接标志(1byte) ??<br>    保持连接(2byte) ?? ??<br>有效载荷<br>    客户端标识符(xbyte)<br>    遗嘱主题(如果开启遗嘱标志才有)(abyte)<br>    遗嘱消息(如果开启遗嘱标志才有)(bbyte)<br>    用户名(ybyte)<br>    密码(zbyte &#x3D; 2byte + ?)<br>byte &#x3D; 2 + 6 + 1 + 1 + 2 + x + y + z<br>开启遗嘱标志：byte &#x3D; 2 + 6 + 1 + 1 + 2 + x + y + z + a + b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2、CONNACK 报文(server)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0x20 0x20<br>报文标识符(2byte) ?? ??<br>byte &#x3D; 2 + 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 3、PUBLISH 报文(client)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)?? ??<br>可变报头<br>    主题名(xbyte)<br>    报文标识符(2byte)(只有qos1或qos2才有报文标识符)<br>有效载荷(ybyte) ?? ?? …<br>byte &#x3D; 2 + x + 2 + y</p><p>如果是qos0：byte &#x3D; 2 + x + y</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 4、PUBACK 报文 (server)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0x40 0x20<br>报文标识符(2byte) ?? ??<br>byte &#x3D; 2 + 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 5、PUBREC 报文</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0x50 0x20<br>报文标识符(2byte) ?? ??<br>byte &#x3D; 2 + 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 6、PUBREL报文</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0x60 0x20<br>报文标识符(2byte) ?? ??<br>byte &#x3D; 2 + 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 7、PUBCOMP 报文 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0x60 0x20<br>报文标识符(2byte) ?? ??<br>byte &#x3D; 2 + 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 8、SUBSCRIBE报文</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0x80 ??<br>可变报头<br>    报文标识符(2byte) ?? ??<br>主题过滤器(nbyte &#x3D; 2byte + xbyte + 1byte)<br>    长度(2byte)<br>    主题过滤器(xbyte)<br>    服务质量要求(1byte)<br>byte &#x3D; 2 + 2 + n<br>报文标识符主要用于主题订阅和订阅确认的身份识别!!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 9、SUBACK 报文(server)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte) 0x90 03<br>可变报头(2byte) ?? ??(返回的这是SUBSCRIBE报文的报文标识符)<br>有效载荷(1byte) ??<br>byte &#x3D; 2 + 2 + 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 10、UNSUBSCRIBE  (client)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0xA0 ??<br>可变报头<br>    报文标识符(2byte) ?? ??<br>主题过滤器(nbyte &#x3D; 2byte + xbyte)<br>    长度(2byte)<br>    主题过滤器(xbyte)<br>byte &#x3D; 2 + 2 + n</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 11、UNSUBACK （server）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte) 0xB0 02<br>可变报头(2byte) ?? ??(返回的这是SUBSCRIBE报文的报文标识符)<br>byte &#x3D; 2 + 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 12、PINGREQ报文（client）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0xC0 0x00<br>byte &#x3D; 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 13、PINGRESP报文（server）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0xD0 0x00<br>byte &#x3D; 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 14、DISCONNECT报文（client）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>固定报头(2byte)0xE0 0x60<br>byte &#x3D; 2</p><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MQTT数据帧解析&quot;&gt;&lt;a href=&quot;#MQTT数据帧解析&quot; class=&quot;headerlink&quot; title=&quot;MQTT数据帧解析&quot;&gt;&lt;/a&gt;MQTT数据帧解析&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;MQTT-控制报文格式&quot;&gt;&lt;a href=&quot;#M</summary>
      
    
    
    
    
    <category term="MQTT" scheme="http://example.com/tags/MQTT/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://example.com/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://example.com/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2023-01-09T12:12:35.000Z</published>
    <updated>2023-09-13T01:49:59.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="红黑树（rbtree）"><a href="#红黑树（rbtree）" class="headerlink" title="红黑树（rbtree）"></a>红黑树（rbtree）</h2><p>[TOC]</p><h3 id="红黑树特性"><a href="#红黑树特性" class="headerlink" title="红黑树特性"></a>红黑树特性</h3><ul><li>1、节点是红节点或者是黑节点</li><li>2、根节点为黑色</li><li>3、叶节点为黑色（叶节点是指末梢的空姐点Nil或NULL）（保证一半以上是黑节点）（是一个满二叉树）</li><li>4、红节点的子节点必须是黑节点</li><li>5、新插入的节点是红节点</li><li>6、每个节点到叶子节点的所有路径，都包含相同数目的黑色节点（相同黑色高度）</li></ul><p>红黑树规则说明：</p><ul><li><p>规则4和5保证了红黑树的大致平衡，根节点到叶子的所有路径中，最长路径不会超过最短路径的两倍</p><p>使得红黑树在最坏的情况下，也能有O（log2N）的查找效率；</p></li></ul><h4 id="红黑树插入规律"><a href="#红黑树插入规律" class="headerlink" title="红黑树插入规律"></a>红黑树插入规律</h4><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230105144601026.png" alt="image-20230105144601026"></p><h3 id="红黑树的基本操作左旋右旋"><a href="#红黑树的基本操作左旋右旋" class="headerlink" title="红黑树的基本操作左旋右旋"></a>红黑树的基本操作左旋右旋</h3><h4 id="对X节点进行左旋"><a href="#对X节点进行左旋" class="headerlink" title="对X节点进行左旋"></a>对X节点进行左旋</h4><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230109161252478.png" alt="image-20230109161252478"></p><h4 id="对X节点进行右旋"><a href="#对X节点进行右旋" class="headerlink" title="对X节点进行右旋"></a>对X节点进行右旋</h4><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230109161710020.png" alt="image-20230109161710020"></p><h3 id="红黑树节点添加调整"><a href="#红黑树节点添加调整" class="headerlink" title="红黑树节点添加调整"></a>红黑树节点添加调整</h3><h5 id="红黑树节点添加（添加的节点都是红色节点）"><a href="#红黑树节点添加（添加的节点都是红色节点）" class="headerlink" title="红黑树节点添加（添加的节点都是红色节点）"></a>红黑树节点添加（添加的节点都是红色节点）</h5><p>将红黑树当作普通二叉树添加节点，只有在进行调整和着色。</p><p>当节点插入成功之后，我们需要根据插入的节点进行调整，使其变成一颗红黑树。</p><h5 id="插入节点的调整"><a href="#插入节点的调整" class="headerlink" title="插入节点的调整"></a>插入节点的调整</h5><p>节点插入之后可能出现3种情况：</p><ul><li>情况1：插入节点的父亲节点和叔叔节点是红色</li></ul><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230109174621234.png" alt="image-20230109174621234"></p><p>情况1处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、将插入节点的父节点设为黑色</span><br><span class="line">2、将插入节点的叔叔节点设为黑色</span><br><span class="line">3、将插入节点的祖父节点设为红色</span><br><span class="line">4、将祖父节点设为当前节点，之后继续对红色节点操作</span><br></pre></td></tr></table></figure><p>情况1处理完成之后会变成，情况2</p><ul><li>情况2：插入节点的叔叔节点是黑色，且当前节点是父节点的右孩子</li></ul><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230109175632366.png" alt="image-20230109175632366"></p><p>情况2处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、将父节点作为新的当前节点</span><br><span class="line">2、以新的当前节点作为支点进行左旋</span><br></pre></td></tr></table></figure><ul><li><p>情况3：插入节点的叔叔节点是黑色，且当前节点是父节点的左孩子</p><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230110093517079.png" alt="image-20230110093517079"></p></li></ul><p>情况3处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、将父亲节点设为黑色</span><br><span class="line">2、将祖父节点设为红色</span><br><span class="line">3、以祖父节点为支点进行右旋</span><br></pre></td></tr></table></figure><h3 id="红黑树节点删除"><a href="#红黑树节点删除" class="headerlink" title="红黑树节点删除"></a>红黑树节点删除</h3><h4 id="红黑树节点删除可能出现的情况"><a href="#红黑树节点删除可能出现的情况" class="headerlink" title="红黑树节点删除可能出现的情况"></a>红黑树节点删除可能出现的情况</h4><h5 id="被删除节点无子节点"><a href="#被删除节点无子节点" class="headerlink" title="被删除节点无子节点"></a>被删除节点无子节点</h5><ul><li><p>case 1:被删除节点为红色</p><ul><li>不需要任何处理，红黑树是平衡的。</li></ul></li><li><p>case 2:被删除节点为黑色</p><p>因为删除黑色结点会破坏红黑树的性质5，所以为了不破坏性质5，将node删除后用一个拥有额外黑色的null替代它（可以想象是将node删除后，在这个位置放了一个黑色的权值），剩下的就是调平的过程，最终这个游离的黑色权值被扔掉，整个删除操作完成。</p><ul><li><p>1、node节点的兄弟节点是红色</p><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230110212714544.png" alt="image-20230110212714544"></p><p>处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（左旋父，父祖换色）</span><br><span class="line">1、将node的兄弟节点设为“黑色”。</span><br><span class="line">2、将node的父节点设为“红色”。</span><br><span class="line">3、对node的父节点进行左旋。</span><br><span class="line">4、左旋后，重新设置node的兄弟节点。</span><br></pre></td></tr></table></figure><p>如果NL节点下面的节点是NIL节点的话，就变成case4情况。</p><p>如果NIL节点下面的左节点是红节点，右节点是黑色。变成case3情况.</p><p>如果NIL节点下面的右节点是红节点，左节点是黑色。变成case2情况.</p></li><li><p>2、node的兄弟节点是黑色，兄弟节点的右孩子是红色（兄黑，右红侄）</p><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230110210208576.png" alt="image-20230110210208576"></p><p>处理：（处理后，红黑树平衡）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（左旋父，祖染父色，父叔黑）</span><br><span class="line">1、将node父亲节点的颜色赋值给node的兄弟节点</span><br><span class="line">2、将node父亲节点设为黑色</span><br><span class="line">3、将node兄弟节点的右孩子设为黑色</span><br><span class="line">4、以node父亲节点为支点进行左旋</span><br><span class="line">5、设置node节点为根节点</span><br></pre></td></tr></table></figure></li><li><p>3、node的兄弟节点是黑色，兄弟节点的左孩子是红色（兄黑，左红侄）</p><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230110203948743.png" alt="image-20230110203948743"></p><p>处理：（处理后变成兄黑，右红侄）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（右旋兄，交换兄弟节点与其右子节点颜色）</span><br><span class="line">1、将node兄弟节点的左孩子设为“黑色”。</span><br><span class="line">2、将node兄弟节点设为“红色”。</span><br><span class="line">3、对node的兄弟节点进行右旋。</span><br><span class="line">4、 右旋后，重新设置node的兄弟节点。</span><br></pre></td></tr></table></figure></li><li><p>4、node节点的兄弟节点是黑色，双黑节点（兄弟节点的子节点是NIL节点）</p><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230110210411856.png" alt="image-20230110210411856"></p><p>处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（兄弟红，用递归，遇到根节点或者是红节点，染黑回）</span><br><span class="line">（将兄弟染红，视角递归到P节点（或者说是当前节点是NIL节点的父节点），如果P节点是红色或者是根节点，就直接将P节点染黑返回）</span><br><span class="line">1、将node节点的兄弟节点设为红色</span><br><span class="line">2、将node的父节点设为新的node节点</span><br></pre></td></tr></table></figure><p>如果P节点是红色，直接将P节点染黑返回</p><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230110221049902.png" alt="image-20230110221049902"></p><p>如果P节点是黑色，会变成case1情况。</p></li></ul></li></ul><h5 id="被删除节点只有一个子节点"><a href="#被删除节点只有一个子节点" class="headerlink" title="被删除节点只有一个子节点"></a>被删除节点只有一个子节点</h5><ul><li><p>case 3:被删除节点是黑色（被删除节点是红色不可能，违反规则）</p><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230110223237204.png" alt="image-20230110223237204"></p><ul><li>将Node节点删除之后，把他的子节点变成黑色完成红黑树平衡</li></ul></li></ul><h5 id="被删节点有两个子节点（被删节点是黑色或者是红色）"><a href="#被删节点有两个子节点（被删节点是黑色或者是红色）" class="headerlink" title="被删节点有两个子节点（被删节点是黑色或者是红色）"></a>被删节点有两个子节点（被删节点是黑色或者是红色）</h5><p>当被删节点有两个节点的时候，需要先找到这个被删节点的后继节点（或者是前驱节点），不用改变颜色，将后继节点替换删除节点。</p><p>如果删除节点的后继节点是（node-&gt;right&gt;nl）,使用nl替换删除node之后，出现以下情况：</p><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230110224417963.png" alt="image-20230110224417963"></p><ul><li>如果nl是黑色，会转变成case 2</li><li>如果nl是红色,   会转变成case 1</li></ul><p>如果删除节点的后继节点是（node-&gt;right）,使用nl替换删除node之后，出现一下情况：</p><p><img src="/2023/01/09/%E7%BA%A2%E9%BB%91%E6%A0%91/image-20230110224548810.png" alt="image-20230110224548810"></p><ul><li>如果right是黑色，会变成 case 3 </li><li>如果right是红色，会变成case 1</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;红黑树（rbtree）&quot;&gt;&lt;a href=&quot;#红黑树（rbtree）&quot; class=&quot;headerlink&quot; title=&quot;红黑树（rbtree）&quot;&gt;&lt;/a&gt;红黑树（rbtree）&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;红黑树特性&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>gpio子系统</title>
    <link href="http://example.com/2022/12/05/gpio%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/12/05/gpio%E5%AD%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-12-05T06:59:46.000Z</published>
    <updated>2023-09-13T01:49:59.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gpio子系统"><a href="#gpio子系统" class="headerlink" title="gpio子系统"></a>gpio子系统</h2><p>&#x2F;home&#x2F;dirivers&#x2F;clone&#x2F;imx_kernel_4.19.35&#x2F;ebf_linux_kernel_6ull_depth1&#x2F;arch&#x2F;arm&#x2F;boot&#x2F;dts&#x2F;imx6ull.dtsi文件中的 GPIO 子节点记录着 GPIO 控制器的寄存器地址  ，</p><h4 id="gpio4节点"><a href="#gpio4节点" class="headerlink" title="gpio4节点"></a>gpio4节点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gpio4: gpio@20a8000 &#123;</span><br><span class="line">    compatible = &quot;fsl,imx6ul-gpio&quot;, &quot;fsl,imx35-gpio&quot;;</span><br><span class="line">    reg = &lt;0x20a8000 0x4000&gt;;</span><br><span class="line">    interrupts = &lt;GIC_SPI 72 IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class="line">    &lt;GIC_SPI 73 IRQ_TYPE_LEVEL_HIGH&gt;;</span><br><span class="line">    clocks = &lt;&amp;clks IMX6UL_CLK_GPIO4&gt;;</span><br><span class="line">    gpio-controller;</span><br><span class="line">    #gpio-cells = &lt;2&gt;;</span><br><span class="line">    interrupt-controller;</span><br><span class="line">    #interrupt-cells = &lt;2&gt;;</span><br><span class="line">    gpio-ranges = &lt;&amp;iomuxc 0 94 17&gt;, &lt;&amp;iomuxc 17 117 12&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>compatible：与GPIO子系统的平台驱动做匹配</li><li>reg：GPIO 寄存器的基地址， GPIO4 的寄存器组是的映射地址为 0x20a8000-0x20ABFFF  </li><li>interrupts：描述中断相关的信息  </li><li>clocks：初始化 GPIO 外设时钟信息  </li><li>gpio-controller：表示 gpio4 是一个 GPIO 控制器  </li><li>#gpio-cells：表示有多少个 cells 来描述 GPIO 引脚  </li><li>interrupt-controller：表示 gpio4 也是个中断控制器  </li><li>#interrupt-cells：表示用多少个 cells 来描述一个中断  </li><li>gpio-ranges：将 gpio 编号转换成 pin 引脚， &lt;&amp;iomuxc 0 94 17&gt;，表示将 gpio4 的第 0 个引<br>脚引脚映射为 97， 17 表示的是引脚的个数。</li></ul><p>gpio4这个节点对整个gpio4进行了描述，使用gpio子系统时需要往设备树添加节点，在驱动程序中使用gpio子系统提供的API实现控制gpio的效果。</p><h4 id="在设备树中添加RGB灯的设备树节点"><a href="#在设备树中添加RGB灯的设备树节点" class="headerlink" title="在设备树中添加RGB灯的设备树节点"></a>在设备树中添加RGB灯的设备树节点</h4><p>在&#x2F;imx6ull-mmc-npi.dtb  的根节点下面添加RGB节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rgb_led&#123;</span><br><span class="line">    #address-cells = &lt;1&gt;;</span><br><span class="line">    #size-cells = &lt;1&gt;;</span><br><span class="line">    pinctrl-names = &quot;default&quot;;</span><br><span class="line">    compatible = &quot;fire,rgb-led&quot;;</span><br><span class="line">    pinctrl-0 = &lt;&amp;pinctrl_rgb_led&gt;; //指定rgb灯的引脚pinctrl信息。</span><br><span class="line">    rgb_led_red = &lt;&amp;gpio1 4 GPIO_ACTIVE_LOW&gt;;//指定引脚使用的哪个 GPIO</span><br><span class="line">    rgb_led_green = &lt;&amp;gpio4 20 GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">    rgb_led_blue = &lt;&amp;gpio4 19 GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">    status = &quot;okay&quot;;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rgb_led_red = &lt;&amp;gpio1 4 GPIO_ACTIVE_LOW&gt;;</span><br></pre></td></tr></table></figure><ul><li><p>rgb_led_red：设置引脚名字，在使用gpio子系统提供的API操作GPIO时会用到。</p><p>const char *propname 参数用到rgb_led_red,在获取gpio编号时使用。</p></li><li><p>&amp;gpio1：指定gpio组</p></li><li><p>4：指定gpio编号</p></li><li><p>GPIO_ACTIVE_LOW：指定有效电平</p></li></ul><p>向设备树中添加节点后重新编译设备树。</p><h3 id="gpio子系统常用API函数详解"><a href="#gpio子系统常用API函数详解" class="headerlink" title="gpio子系统常用API函数详解"></a>gpio子系统常用API函数详解</h3><h5 id="of-get-named-gpio：获取gpio编号函数"><a href="#of-get-named-gpio：获取gpio编号函数" class="headerlink" title="of_get_named_gpio：获取gpio编号函数"></a>of_get_named_gpio：获取gpio编号函数</h5><p>GPIO 编号可以通过 of_get_named_gpio 函数从设备树中获取。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static inline int of_get_named_gpio(struct device_node *np, const char *propname,</span><br><span class="line">int index)</span><br></pre></td></tr></table></figure><ul><li>np：指定设备节点</li><li>propname：GPIO 属性名，与设备树中定义的属性名对应。  </li><li>index：引脚索引值，在设备树中一条引脚属性可以包含多个引脚，该参数用于指定获取那个引脚。</li></ul><p>成功返回gpio编号，失败返回负数；</p><h5 id="gpio-request-：gpio申请函数"><a href="#gpio-request-：gpio申请函数" class="headerlink" title="gpio_request ：gpio申请函数"></a>gpio_request ：gpio申请函数</h5><p>一个 GPIO 只能被申请一次，当不再使用某一个引脚时记得将其释放掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static inline int gpio_request(unsigned gpio, const char *label);</span><br></pre></td></tr></table></figure><ul><li>gpio: 要申请的 GPIO 编号，该值是函数 of_get_named_gpio 的返回值。  </li><li>label: 引脚名字，相当于为申请得到的引脚取了个别名。</li></ul><p>成功返回0，失败返回负数；</p><h5 id="gpio-free：gpio释放函数"><a href="#gpio-free：gpio释放函数" class="headerlink" title="gpio_free：gpio释放函数"></a>gpio_free：gpio释放函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static inline void gpio_free(unsigned gpio);</span><br></pre></td></tr></table></figure><ul><li>gpio：要释放的 GPIO 编号。</li></ul><h5 id="gpio-direction-output：gpio输出设置函数"><a href="#gpio-direction-output：gpio输出设置函数" class="headerlink" title="gpio_direction_output：gpio输出设置函数"></a>gpio_direction_output：gpio输出设置函数</h5><p>用于将引脚设置为输出模式  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static inline int gpio_direction_output(unsigned gpio , int value);</span><br></pre></td></tr></table></figure><ul><li>gpio：设置的 GPIO 的编号。  </li><li>value：输出值， 1，表示高电平。 0 表示低电平。</li></ul><p>成功返回0，失败返回负数；</p><h5 id="gpio-direction-input：gpio输入设置函数"><a href="#gpio-direction-input：gpio输入设置函数" class="headerlink" title="gpio_direction_input：gpio输入设置函数"></a>gpio_direction_input：gpio输入设置函数</h5><p>用于将引脚设置为输入模式。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static inline int gpio_direction_input(unsigned gpio)</span><br></pre></td></tr></table></figure><ul><li>gpio：要设置的 GPIO 的编号。</li></ul><p>成功返回0，失败返回负数；</p><h5 id="gpio-get-value：获取gpio引脚值函数"><a href="#gpio-get-value：获取gpio引脚值函数" class="headerlink" title="gpio_get_value：获取gpio引脚值函数"></a>gpio_get_value：获取gpio引脚值函数</h5><p>用于获取引脚的当前状态。无论引脚被设置为输出或者输入都可以用该函数获取引脚的当前状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static inline int gpio_get_value(unsigned gpio);</span><br></pre></td></tr></table></figure><ul><li>gpio：要设置的 GPIO 的编号。</li></ul><p>成功返回0，失败返回负数；</p><h5 id="gpio-set-value：设置gpio输出值"><a href="#gpio-set-value：设置gpio输出值" class="headerlink" title="gpio_set_value：设置gpio输出值"></a>gpio_set_value：设置gpio输出值</h5><p>该函数只用于那些设置为输出模式的 GPIO.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static inline int gpio_direction_output(unsigned gpio, int value);</span><br></pre></td></tr></table></figure><ul><li>gpio：设置的 GPIO 的编号。  </li><li>value：输出值， 1，表示高电平。 0 表示低电平。</li></ul><p>成功返回0，失败返回负数；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;gpio子系统&quot;&gt;&lt;a href=&quot;#gpio子系统&quot; class=&quot;headerlink&quot; title=&quot;gpio子系统&quot;&gt;&lt;/a&gt;gpio子系统&lt;/h2&gt;&lt;p&gt;&amp;#x2F;home&amp;#x2F;dirivers&amp;#x2F;clone&amp;#x2F;imx_kerne</summary>
      
    
    
    
    
    <category term="Linux设备驱动" scheme="http://example.com/tags/Linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>pinctrl子系统</title>
    <link href="http://example.com/2022/12/05/pinctrl%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/12/05/pinctrl%E5%AD%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-12-05T06:09:03.000Z</published>
    <updated>2023-09-13T01:49:59.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pinctrl子系统"><a href="#pinctrl子系统" class="headerlink" title="pinctrl子系统"></a>pinctrl子系统</h2><h3 id="pinctrl子系统简介"><a href="#pinctrl子系统简介" class="headerlink" title="pinctrl子系统简介"></a>pinctrl子系统简介</h3><p>pinctrl 子系统主要用于管理芯片的引脚  </p><h3 id="pinctrl子系统编写格式"><a href="#pinctrl子系统编写格式" class="headerlink" title="pinctrl子系统编写格式"></a>pinctrl子系统编写格式</h3><h4 id="iomuxc节点介绍"><a href="#iomuxc节点介绍" class="headerlink" title="iomuxc节点介绍"></a>iomuxc节点介绍</h4><h5 id="去找到imx6ull-dtsi里面的iomuxc节点"><a href="#去找到imx6ull-dtsi里面的iomuxc节点" class="headerlink" title="去找到imx6ull.dtsi里面的iomuxc节点"></a>去找到imx6ull.dtsi里面的iomuxc节点</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/dirivers/clone/imx_kernel_4.19.35/ebf_linux_kernel_6ull_depth1/arch/arm/boot/dts/imx6ull.dtsi</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iomuxc: iomuxc@20e0000 &#123;</span><br><span class="line">    compatible = &quot;fsl,imx6ul-iomuxc&quot;;</span><br><span class="line">    reg = &lt;0x20e0000 0x4000&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>compatible：与平台驱动做匹配的名字，这里是与pinctrl平台做匹配的名字</li><li>reg：表示的是引脚配置寄存器的基地址</li></ul><h5 id="在imx6ull-mmc-npi-dts里面使用-amp-iomuxc向iomuxc节点追加内容。"><a href="#在imx6ull-mmc-npi-dts里面使用-amp-iomuxc向iomuxc节点追加内容。" class="headerlink" title="在imx6ull-mmc-npi.dts里面使用&amp;iomuxc向iomuxc节点追加内容。"></a>在imx6ull-mmc-npi.dts里面使用&amp;iomuxc向iomuxc节点追加内容。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&amp;iomuxc &#123;</span><br><span class="line">pinctrl-names = &quot;default&quot;;</span><br><span class="line">pinctrl-0 = &lt;&amp;pinctrl_hog_1&gt;;</span><br><span class="line"></span><br><span class="line">pinctrl_hog_1: hoggrp-1 &#123;</span><br><span class="line">fsl,pins = &lt;</span><br><span class="line">MX6UL_PAD_UART1_RTS_B__GPIO1_IO190x17059 /* SD1 CD */</span><br><span class="line">MX6UL_PAD_GPIO1_IO05__USDHC1_VSELECT0x17059 /* SD1 VSELECT */</span><br><span class="line">MX6UL_PAD_GPIO1_IO09__GPIO1_IO09        0x17059 /* SD1 RESET */</span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pinctrl-names：指定pin的状态列表，默认设置为”default”</li><li>pinctrl-0 &#x3D; &lt;&amp;pinctrl_hog_1&gt;：表示在默认设置下，将使用pinctrl_hog_1这个节点来设置GPIO端口状态</li><li>其余都是pinctrl子节点，按照规范格式编写</li></ul><h5 id="pinctrl向iomuxc举例说明"><a href="#pinctrl向iomuxc举例说明" class="headerlink" title="pinctrl向iomuxc举例说明"></a>pinctrl向iomuxc举例说明</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&amp;iomuxc &#123;</span><br><span class="line">  pinctrl-names = &quot;default&quot;,&quot;sleep&quot;,&quot;init&quot;;</span><br><span class="line">  pinctrl-0 = &lt;&amp;pinctrl_uart1&gt;;</span><br><span class="line">  pinctrl-1 =&lt;&amp;xxx&gt;;</span><br><span class="line">  pinctrl-2 =&lt;&amp;yyy&gt;;</span><br><span class="line">  ...</span><br><span class="line">  pinctrl_uart1: uart1grp &#123;</span><br><span class="line">    fsl,pins = &lt;</span><br><span class="line">      MX6UL_PAD_UART1_TX_DATA__UART1_DCE_TX 0x1b0b1</span><br><span class="line">      MX6UL_PAD_UART1_RX_DATA__UART1_DCE_RX 0x1b0b1</span><br><span class="line">    &gt;;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   xxx: xxx_grp &#123;</span><br><span class="line">      ... 这里设置将引脚设置为其他模式</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   yyy: yyy_grp &#123;</span><br><span class="line">      ... 这里设置将引脚设置为其他模式</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pinctrl-names： 定义引脚状态。  </li><li>pinctrl-0： 定义第 0 种状态需要使用到的引脚配置，可引用其他节点标识。  </li><li>pinctrl-1： 定义第 1 种状态需要使用到的引脚配置。  </li><li>pinctrl-2： 定义第 2 种状态需要使用到的引脚配置</li></ul><h5 id="pinctrl子节点格式规范，格式框架"><a href="#pinctrl子节点格式规范，格式框架" class="headerlink" title="pinctrl子节点格式规范，格式框架"></a>pinctrl子节点格式规范，格式框架</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pinctrl_自定义名字：自定义名字&#123;</span><br><span class="line">fsl,pins = &lt;</span><br><span class="line">引脚复用宏定义 PAD（引脚属性）</span><br><span class="line">引脚复用宏定义 PAD（引脚属性）</span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>引脚复用宏定义在&#x2F;home&#x2F;dirivers&#x2F;clone&#x2F;imx_kernel_4.19.35&#x2F;ebf_linux_kernel_6ull_depth1&#x2F;arch&#x2F;arm&#x2F;boot&#x2F;dts&#x2F;imx6ul-pinfunc.hl里面去寻找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">宏定义格式：</span><br><span class="line">#define MX6UL_xxx mux_reg conf_reg input_reg mux_mode input_val</span><br><span class="line"></span><br><span class="line">mux_reg conf_reg input_reg mux_mode input_val</span><br><span class="line">0x0084 0x0310 0x0000 0x0 0x0</span><br></pre></td></tr></table></figure><ul><li>mux_reg：引 脚 复 用 选 择 寄 存 器 偏 移 地 址  (在寄存器基地址上面偏移（0x0084）)</li><li>conf_reg：引脚（PAD）属性控制寄存器偏移地址  （基本参考官方给出的配置）</li><li>input_reg：输入选择寄存器便宜地址</li><li>mux_mode：选择需要配置的复用模式0</li><li>input_val：输入选择寄存器的值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define MX6UL_PAD_BOOT_MODE0__GPIO5_IO100x0014 0x02a0 0x0000 5 0</span><br><span class="line">#define MX6UL_PAD_BOOT_MODE1__GPIO5_IO110x0018 0x02a4 0x0000 5 0</span><br></pre></td></tr></table></figure><h3 id="如何新增pinctrl节点"><a href="#如何新增pinctrl节点" class="headerlink" title="如何新增pinctrl节点"></a>如何新增pinctrl节点</h3><p>在imx6ull-mmc-npi.dts新增pinctrl节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&amp;iomuxc &#123;</span><br><span class="line">pinctrl-names = &quot;default&quot;;</span><br><span class="line">pinctrl-0 = &lt;&amp;pinctrl_hog_1&gt;;</span><br><span class="line">/*新增加的pinctrl节点*/</span><br><span class="line">pinctrl_rgb_led:rgb_led&#123;</span><br><span class="line">fsl,pins = &lt;</span><br><span class="line">MX6UL_PAD_GPIO1_IO04__GPIO1_IO04 0x000010B1</span><br><span class="line">MX6UL_PAD_CSI_HSYNC__GPIO4_IO20 0x000010B1</span><br><span class="line">MX6UL_PAD_CSI_VSYNC__GPIO4_IO19 0x000010B1</span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;pinctrl子系统&quot;&gt;&lt;a href=&quot;#pinctrl子系统&quot; class=&quot;headerlink&quot; title=&quot;pinctrl子系统&quot;&gt;&lt;/a&gt;pinctrl子系统&lt;/h2&gt;&lt;h3 id=&quot;pinctrl子系统简介&quot;&gt;&lt;a href=&quot;#pinctrl子系</summary>
      
    
    
    
    
    <category term="Linux设备驱动" scheme="http://example.com/tags/Linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>设备树插件</title>
    <link href="http://example.com/2022/12/04/%E8%AE%BE%E5%A4%87%E6%A0%91%E6%8F%92%E4%BB%B6/"/>
    <id>http://example.com/2022/12/04/%E8%AE%BE%E5%A4%87%E6%A0%91%E6%8F%92%E4%BB%B6/</id>
    <published>2022-12-04T12:51:28.000Z</published>
    <updated>2023-09-13T01:49:59.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设备树插件"><a href="#设备树插件" class="headerlink" title="设备树插件"></a>设备树插件</h2><h3 id="设备树插件简介"><a href="#设备树插件简介" class="headerlink" title="设备树插件简介"></a>设备树插件简介</h3><p>设备树插件使用模块化管理硬件资源，可以更加灵活的去使用。</p><h5 id="如何使用设备树插件？"><a href="#如何使用设备树插件？" class="headerlink" title="如何使用设备树插件？"></a>如何使用设备树插件？</h5><p>如果没有开启设备树插件的话，需要更改配置去开启设备树插件</p><h5 id="设备树插件语法"><a href="#设备树插件语法" class="headerlink" title="设备树插件语法"></a>设备树插件语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/dts-v1/;</span><br><span class="line">/plugin/;</span><br><span class="line">/&#123;</span><br><span class="line">fragment@0 &#123;</span><br><span class="line">        target-path = &quot;/&quot;;</span><br><span class="line">        __overlay__ &#123;</span><br><span class="line">        /* 在此添加要插入的节点 */</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>&#x2F;dts-v1&#x2F;：用于指定dts的版本</p></li><li><p>&#x2F;plugin&#x2F;：表示允许使用未定义的引用并记录它们，设备树插件中可以引用主设备树中的节<br>点，而这些“引用的节点”对于设备树插件来说就是未定义的，所以设备树插件应该加上<br>“&#x2F;plugin&#x2F;”。  </p></li><li><p>target-path &#x3D; “xxx”：指定插件设备树的 父节点路径</p></li></ul><p>  target-path &#x3D; “&#x2F;“,指定设备树插件的加载位置,默认加载到根节点下。</p><ul><li>{<em><strong>overlay</strong></em> }：将要插入的设备及节点或者要引用追加的设备树节点放在overlay{}内；</li></ul><h3 id="设备树插件使用方式"><a href="#设备树插件使用方式" class="headerlink" title="设备树插件使用方式"></a>设备树插件使用方式</h3><h4 id="编译设备树插件"><a href="#编译设备树插件" class="headerlink" title="编译设备树插件"></a>编译设备树插件</h4><h5 id="使用手动编译-借助linux内核里面的插件编译工具"><a href="#使用手动编译-借助linux内核里面的插件编译工具" class="headerlink" title="使用手动编译(借助linux内核里面的插件编译工具)"></a>使用手动编译(借助linux内核里面的插件编译工具)</h5><p>找到scripts目录下面的dtc文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/kernel/build/scripts/dtc</span><br></pre></td></tr></table></figure><p>在scripts当前目录执行,将dts文件编译成dtbo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./scripts/dtc/dtc -I dts -O dtb -o xxx.dtbo arch/arm/dts/xxx.dts</span><br><span class="line">/home/kernel/build/scripts/dtc/dtc -I dts -O dtb -o xxx.dtbo arch/arm/dts/xxx.dts</span><br><span class="line">//实际使用</span><br><span class="line">sudo /home/kernel/build/scripts/dtc/dtc -I dts -O dtb -o devtree_led.dtbo devtree_led.dts</span><br></pre></td></tr></table></figure><p>将dtbo文件反编译成dts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./scripts/dtc/dtc -I dtb -O dts -o xxx.dtbo arch/arm/dts/xxx.dtbo</span><br></pre></td></tr></table></figure><h5 id="使用apt下载dtc工具"><a href="#使用apt下载dtc工具" class="headerlink" title="使用apt下载dtc工具"></a>使用apt下载dtc工具</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install device-tree-compiler</span><br></pre></td></tr></table></figure><h4 id="插件设备树的加载"><a href="#插件设备树的加载" class="headerlink" title="插件设备树的加载"></a>插件设备树的加载</h4><h5 id="在内核运行状态加载（通用）"><a href="#在内核运行状态加载（通用）" class="headerlink" title="在内核运行状态加载（通用）"></a>在内核运行状态加载（通用）</h5><p>1、在&#x2F;sys&#x2F;kernel&#x2F;config&#x2F;device-tree&#x2F;overlays&#x2F;目录下创建一个新目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /sys/kernel/config/device-tree/overlays/xxx</span><br></pre></td></tr></table></figure><p>2、将dtbo固件echo到path属性文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo xxx.dtbo &gt; /sys/kernel/config/device-tree/overlays/xxx/path</span><br></pre></td></tr></table></figure><p>或者将dtbo的内容cat到dtbo属性文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.dtbo &gt;/sys/kernel/config/device-tree/overlays/xxx/dtbo</span><br></pre></td></tr></table></figure><p>3、节点将被创建，查看内核设备树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /proc/device-tree</span><br></pre></td></tr></table></figure><p>4、删除“插件设备树”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir /sys/kernerl/config/device-tree/overlays/xxx</span><br></pre></td></tr></table></figure><h5 id="使用uboot加载（Linux-野火开发板）"><a href="#使用uboot加载（Linux-野火开发板）" class="headerlink" title="使用uboot加载（Linux_野火开发板）"></a>使用uboot加载（Linux_野火开发板）</h5><p>修改&#x2F;boot&#x2F;uEnv.txt配置文件，在uEnv.txt文件里面添加需要加载的dtbo文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设备树插件&quot;&gt;&lt;a href=&quot;#设备树插件&quot; class=&quot;headerlink&quot; title=&quot;设备树插件&quot;&gt;&lt;/a&gt;设备树插件&lt;/h2&gt;&lt;h3 id=&quot;设备树插件简介&quot;&gt;&lt;a href=&quot;#设备树插件简介&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="Linux驱动开发" scheme="http://example.com/tags/Linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
